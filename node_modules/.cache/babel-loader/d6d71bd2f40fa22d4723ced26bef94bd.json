{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { createStore } from 'redux';\nimport { Line, Doughnut } from \"react-chartjs-2\";\n\nvar Chart = require('chart.js');\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\n\nlet defaultState = {\n  chartValues: [1, 2, 5, 2, 7, 9, 3]\n};\nconst MAX_CHART_VALS = 70;\n\nfunction App() {\n  const [chartValues, updateChartValues] = useState([]);\n  const [latestChartValue, updateLatestChartValue] = useState([]);\n\n  function reducer(state = defaultState, action) {\n    switch (action.type) {\n      case 'UPDATE_CHART':\n        let chartValuesTemp = state.chartValues.concat([]);\n        chartValuesTemp.push(action.value);\n\n        if (chartValuesTemp.length > MAX_CHART_VALS) {\n          chartValuesTemp.shift();\n        }\n\n        return { ...state,\n          chartValues: chartValuesTemp\n        };\n\n      default:\n        return state;\n    }\n  }\n\n  useEffect(() => {\n    let store = createStore(reducer);\n    store.subscribe(() => {\n      let state = store.getState(); //console.log('state:', state)\n\n      updateChartValues(state.chartValues); //updateLatestChartValue(state.chartValues[state.chartValues.length-1])\n    });\n    setInterval(() => {\n      store.dispatch({\n        type: 'UPDATE_CHART',\n        value: Math.floor(Math.random() * 100)\n      });\n    }, 1000);\n  }, []);\n\n  function formatTime(value) {\n    if (value < 10) {\n      return '0' + value;\n    }\n\n    return value;\n  }\n\n  let labels = [];\n\n  function makeLabel(timestamp) {\n    return formatTime(timestamp.getHours()) + ':' + formatTime(timestamp.getMinutes()) + ':' + formatTime(timestamp.getSeconds());\n  }\n\n  function makeLabels() {\n    let currentSecond = new Date(Date.now());\n\n    for (let i = chartValues.length - 1; i >= 0; i -= 1) {\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)));\n    }\n  }\n\n  makeLabels(); //console.log('labels:', labels)\n\n  let data = {\n    labels: labels,\n    datasets: [{\n      label: \"Spam messages received per second\",\n      fillColor: \"rgba(220,220,220,0.2)\",\n      lineTension: 0.1,\n      strokeColor: \"rgba(220,220,220,1)\",\n      pointColor: \"rgba(220,220,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,220,1)\",\n      data: chartValues\n    }]\n  };\n  let chartOptions = {\n    animation: {\n      duration: 0\n    }\n  }; // let data =\n  //   {\n  //     labels:['a','b','c','d'],\n  //     dataSets:[{\n  //       type:'line',\n  //       backgroundColor: \"rgba(142, 243, 197, 0.5)\",\n  //       pointBackgroundColor: \"#fff\",\n  //       pointHoverBackgroundColor: '#fff',\n  //       pointStyle: \"circle\",\n  //       label: \"Monthly Expenses\",\n  //       borderColor: \"#2be1d8\",\n  //       borderWidth: 3,\n  //       borderJoinStyle: \"round\",\n  //       lineTension: 0.3,\n  //       fontColor: \"#fff\",\n  //       hitRadius: 5,\n  //       hoverRadius: 8,\n  //       radius: 4,\n  //       data: chartValues\n  //     }]\n  //   }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, \"The Spaminator\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, \"The Enterprise Spam Eliminator\"), /*#__PURE__*/React.createElement(Line, {\n    data: data || {},\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, 'Spam messages received just this last second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, chartValues[chartValues.length - 1] + ' at ' + new Date(Date.now()).toLocaleString()));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/App.js"],"names":["React","useState","useEffect","createStore","Line","Doughnut","Chart","require","defaultState","chartValues","MAX_CHART_VALS","App","updateChartValues","latestChartValue","updateLatestChartValue","reducer","state","action","type","chartValuesTemp","concat","push","value","length","shift","store","subscribe","getState","setInterval","dispatch","Math","floor","random","formatTime","labels","makeLabel","timestamp","getHours","getMinutes","getSeconds","makeLabels","currentSecond","Date","now","i","data","datasets","label","fillColor","lineTension","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","chartOptions","animation","duration","toLocaleString"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { createStore } from 'redux'\nimport {Line, Doughnut} from \"react-chartjs-2\";\nvar Chart = require('chart.js');\n\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\nlet defaultState = {\n  chartValues:[1,2,5,2,7,9,3]\n}\nconst MAX_CHART_VALS = 70\n\nfunction App() {\n\n  const [chartValues, updateChartValues] = useState([])\n  const [latestChartValue, updateLatestChartValue] = useState([])\n  function reducer(state=defaultState, action) {\n    switch (action.type) {\n      case 'UPDATE_CHART':\n        let chartValuesTemp = state.chartValues.concat([])\n        chartValuesTemp.push(action.value)\n        if(chartValuesTemp.length > MAX_CHART_VALS){\n          chartValuesTemp.shift()\n        }\n        return {...state,chartValues:chartValuesTemp}\n      default:\n        return state\n    }\n  }\n\n  useEffect(()=>{\n    let store = createStore(reducer)\n    store.subscribe(() => {\n      let state = store.getState()\n      //console.log('state:', state)\n      updateChartValues(state.chartValues)\n      //updateLatestChartValue(state.chartValues[state.chartValues.length-1])\n    })\n    setInterval(()=>{\n      store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n    },1000)\n  },[])\n\n\n  function formatTime(value){\n    if(value < 10){\n      return '0'+value\n    }\n    return value\n  }\n  let labels = []\n  function makeLabel(timestamp){\n    return formatTime(timestamp.getHours())+':'+formatTime(timestamp.getMinutes())+':'+formatTime(timestamp.getSeconds())\n  }\n\n  function makeLabels(){\n    let currentSecond = new Date(Date.now())\n    for(let i=chartValues.length-1;i>=0;i-=1){\n\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)))\n    }\n  }\n  makeLabels()\n//console.log('labels:', labels)\n\n  let data = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"Spam messages received per second\",\n        fillColor: \"rgba(220,220,220,0.2)\",\n        lineTension:0.1,\n        strokeColor: \"rgba(220,220,220,1)\",\n        pointColor: \"rgba(220,220,220,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(220,220,220,1)\",\n        data: chartValues\n      }\n    ]\n  };\n  let chartOptions={\n    animation:{\n      duration: 0\n    }\n  }\n  // let data =\n  //   {\n  //     labels:['a','b','c','d'],\n  //     dataSets:[{\n  //       type:'line',\n  //       backgroundColor: \"rgba(142, 243, 197, 0.5)\",\n  //       pointBackgroundColor: \"#fff\",\n  //       pointHoverBackgroundColor: '#fff',\n  //       pointStyle: \"circle\",\n  //       label: \"Monthly Expenses\",\n  //       borderColor: \"#2be1d8\",\n  //       borderWidth: 3,\n  //       borderJoinStyle: \"round\",\n  //       lineTension: 0.3,\n  //       fontColor: \"#fff\",\n  //       hitRadius: 5,\n  //       hoverRadius: 8,\n  //       radius: 4,\n  //       data: chartValues\n  //     }]\n  //   }\n  return (\n    <div className=\"App\">\n      <h4>The Spaminator</h4>\n      <h5>The Enterprise Spam Eliminator</h5>\n      <Line data={data || {}} options={chartOptions} />\n      <div>{'Spam messages received just this last second:'}</div>\n      <div>{chartValues[chartValues.length-1]+' at '+new Date(Date.now()).toLocaleString()}</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}