{"ast":null,"code":"import * as rr from './ReactiveRobot';\nimport * as ev from './Events';\nlet clients = [];\nlet updateDelta = 100;\nlet interval = null;\n\nfunction onEvent(event) {\n  switch (event.type) {\n    case ev.INITIALIZE_COMPONENTS:\n      updateDelta = event.data.updateDelta;\n      getData();\n\n    case ev.COMPONENT_UPDATE_GET:\n      clients.push(event.data.name);\n  }\n}\n\nrr.addObserver(onEvent);\nexport function getData() {\n  function sendUpdate() {\n    if (clients.length > 0) {\n      let index = Math.floor(Math.random() * clients.length);\n      let nameOfClientToUpdate = clients[index];\n      rr.next({\n        type: ev.COMPONENT_UPDATE_RECEIVED,\n        data: {\n          name: nameOfClientToUpdate,\n          message: 'updated at ' + Date.now()\n        }\n      });\n    }\n  }\n\n  clearInterval(interval);\n  interval = setInterval(sendUpdate, updateDelta);\n}","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/reactive_robot/src/DataService.js"],"names":["rr","ev","clients","updateDelta","interval","onEvent","event","type","INITIALIZE_COMPONENTS","data","getData","COMPONENT_UPDATE_GET","push","name","addObserver","sendUpdate","length","index","Math","floor","random","nameOfClientToUpdate","next","COMPONENT_UPDATE_RECEIVED","message","Date","now","clearInterval","setInterval"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;AAEA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,WAAW,GAAG,GAAlB;AACA,IAAIC,QAAQ,GAAG,IAAf;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAuB;AACrB,UAAQA,KAAK,CAACC,IAAd;AACE,SAAKN,EAAE,CAACO,qBAAR;AACEL,MAAAA,WAAW,GAAGG,KAAK,CAACG,IAAN,CAAWN,WAAzB;AACAO,MAAAA,OAAO;;AACT,SAAKT,EAAE,CAACU,oBAAR;AACET,MAAAA,OAAO,CAACU,IAAR,CAAaN,KAAK,CAACG,IAAN,CAAWI,IAAxB;AALJ;AAOD;;AACDb,EAAE,CAACc,WAAH,CAAeT,OAAf;AACA,OAAO,SAASK,OAAT,GAAkB;AAEvB,WAASK,UAAT,GAAqB;AACnB,QAAGb,OAAO,CAACc,MAAR,GAAiB,CAApB,EAAsB;AACpB,UAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAclB,OAAO,CAACc,MAAjC,CAAZ;AACA,UAAIK,oBAAoB,GAAGnB,OAAO,CAACe,KAAD,CAAlC;AACAjB,MAAAA,EAAE,CAACsB,IAAH,CAAQ;AAACf,QAAAA,IAAI,EAACN,EAAE,CAACsB,yBAAT;AAAmCd,QAAAA,IAAI,EAAC;AAACI,UAAAA,IAAI,EAACQ,oBAAN;AAA4BG,UAAAA,OAAO,EAAC,gBAAcC,IAAI,CAACC,GAAL;AAAlD;AAAxC,OAAR;AACD;AAEF;;AACDC,EAAAA,aAAa,CAACvB,QAAD,CAAb;AACAA,EAAAA,QAAQ,GAAGwB,WAAW,CAACb,UAAD,EAAYZ,WAAZ,CAAtB;AACD","sourcesContent":["import * as rr from './ReactiveRobot'\nimport * as ev from './Events'\n\nlet clients = []\nlet updateDelta = 100\nlet interval = null\nfunction onEvent(event){\n  switch (event.type){\n    case ev.INITIALIZE_COMPONENTS:\n      updateDelta = event.data.updateDelta\n      getData()\n    case ev.COMPONENT_UPDATE_GET:\n      clients.push(event.data.name)\n  }\n}\nrr.addObserver(onEvent)\nexport function getData(){\n\n  function sendUpdate(){\n    if(clients.length > 0){\n      let index = Math.floor(Math.random()*clients.length)\n      let nameOfClientToUpdate = clients[index]\n      rr.next({type:ev.COMPONENT_UPDATE_RECEIVED,data:{name:nameOfClientToUpdate, message:'updated at '+Date.now()}})\n    }\n\n  }\n  clearInterval(interval)\n  interval = setInterval(sendUpdate,updateDelta)\n}"]},"metadata":{},"sourceType":"module"}