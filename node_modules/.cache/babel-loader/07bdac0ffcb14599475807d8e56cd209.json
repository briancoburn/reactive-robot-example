{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { createStore } from 'redux';\nimport { Line } from \"react-chartjs-2\";\nimport BarChartD3 from './BarChartD3.js';\nimport GeoMap1 from './GeoMap1.js';\nimport ThreeAnim1 from './ThreeAnim1.js';\nlet defaultState = {\n  chartValues: []\n};\nconst MAX_CHART_VALS = 10; //600//10 minutes\n\nfunction App() {\n  const [chartValues, updateChartValues] = useState([]);\n  const [currentMessage, updateCurrentMessage] = useState([]);\n  const [messages, updateMessages] = useState([]);\n  const store = createStore(reducer);\n\n  function reducer(state = defaultState, action) {\n    switch (action.type) {\n      case 'UPDATE_CHART':\n        let chartValuesTemp = state.chartValues.concat([]);\n        chartValuesTemp.push(action.value);\n\n        if (chartValuesTemp.length > MAX_CHART_VALS) {\n          chartValuesTemp.shift();\n        }\n\n        return { ...state,\n          chartValues: chartValuesTemp\n        };\n\n      default:\n        return state;\n    }\n  }\n\n  useEffect(() => {\n    function find_max_sum(arr) {\n      let currentItem = 0;\n      let lastItem = 0;\n      let secondLastItem = 0;\n      let sum = 0;\n      arr.forEach((item, index) => {\n        let addedLastItem = false;\n        let deletedLastItem = false;\n        console.log('start item:' + item + ', lastItem:' + lastItem + ', secondLastItem:' + secondLastItem + ', sum:' + sum);\n\n        if (index === 0) {\n          sum += item;\n          addedLastItem = true;\n          lastItem = item;\n        } else if (item > lastItem) {\n          //currentItem = item;\n          //console.log('item>lastItem==>start==>sum:'+ sum)\n          sum -= lastItem; //if(secondLastItem > lastItem){\n\n          sum += secondLastItem; //}\n\n          sum += item;\n          addedLastItem = true;\n          secondLastItem = lastItem;\n          lastItem = item;\n          deletedLastItem = true; //console.log('item>lastItem==>done==>sum:'+ sum)\n        } else if (item === lastItem || item < lastItem) {\n          //console.log('item===lastItem==>start==>deletedLastItem:'+deletedLastItem+', sum:'+ sum)\n          if (deletedLastItem) {\n            sum += secondLastItem;\n          }\n\n          secondLastItem = lastItem;\n          lastItem = item; //console.log('item===lastItem==>done==>sum:'+ sum)\n        }\n\n        console.log('done item:' + item + ', lastItem:' + lastItem + ', secondLastItem:' + secondLastItem + ', sum:' + sum);\n      });\n      console.log(sum);\n    }\n\n    function find_max_sum2(arr) {\n      let items = [];\n      let finalItems = [];\n      let sum = 0; //make an array of objects with both value and index\n\n      arr.forEach((item, index) => {\n        items.push({\n          value: item,\n          index\n        });\n      }); //sort them by value\n\n      items.sort((a, b) => {\n        if (a.value < b.value) {\n          return 1;\n        } else if (a.value > b.value) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }); //start with the highest values, push everything that is not at an adjacent index to something already there into finalItems\n\n      items.forEach(item => {\n        let okToPush = !finalItems.find(it => {\n          if (it.index === item.index - 1 || it.index === item.index + 1) {\n            return true;\n          }\n        });\n\n        if (okToPush) {\n          finalItems.push(item);\n        }\n      }); //add up the values in finalItems, that will be the highest possible sum available from the array\n\n      finalItems.forEach(final => {\n        sum += final.value;\n      });\n      console.log('sum:', sum);\n    } //find_max_sum([1,2,3,1,5])\n    //find_max_sum2([1,2,3,4])\n    //find_max_sum2([1,2,3,4,1,2,3,4])\n\n\n    find_max_sum2([1, 5, 10, 100, 10, 5]); //\n    //figurePi for Eargo//\n    // function figurePi(sideLength){\n    //   let approxPi = 0\n    //   let radius = sideLength/2\n    //   let inside = 0\n    //   let total = 0\n    //   for(let i=0;i<sideLength;i+=1){\n    //     for(let j=0;j<sideLength;j+=1){\n    //       let distanceToPoint = Math.floor(Math.sqrt(((i/2)*(i/2))+((j/2)*(j/2))))\n    //       if(distanceToPoint < radius){\n    //         inside +=1\n    //       }\n    //       total+=1\n    //     }\n    //   }\n    //   let ratio = inside/total\n    //   let areaOfSquare = sideLength * sideLength\n    //   let areaOfCircle = areaOfSquare * ratio\n    //   approxPi = areaOfCircle/(radius*radius)\n    //   console.log('approxPi:', approxPi)\n    //\n    // }\n    // let pi = figurePi(100000)\n    //100 iterations approxPi: 3.1796\n    //1000 iterations approxPi: 3.14552\n    //10000 approxPi: 3.14199016\n    //100000 approxPi: 3.1416325412\n    // function fib(max){\n    //   let arr = [1,1]\n    //   // let acc = 0\n    //   // while(acc<max){\n    //   //   acc = arr[arr.length-1]+arr[arr.length-2]\n    //   //   console.log('acc:', acc)\n    //   //   arr.push(acc)\n    //   // }\n    //   console.log('arr:', arr)\n    // }\n    // fib(50)\n\n    messages.push({\n      user: 'system',\n      message: 'how can I help you'\n    });\n    store.subscribe(() => {\n      let state = store.getState();\n      updateChartValues(state.chartValues);\n    });\n    setInterval(() => {\n      store.dispatch({\n        type: 'UPDATE_CHART',\n        value: Math.floor(Math.random() * 100)\n      });\n    }, 1000);\n  }, []);\n\n  function formatTime(value) {\n    if (value < 10) {\n      return '0' + value;\n    }\n\n    return value;\n  }\n\n  let labels = [];\n\n  function makeLabel(timestamp) {\n    return formatTime(timestamp.getHours()) + ':' + formatTime(timestamp.getMinutes()) + ':' + formatTime(timestamp.getSeconds());\n  }\n\n  function makeLabels() {\n    let currentSecond = new Date(Date.now());\n\n    for (let i = chartValues.length - 1; i >= 0; i -= 1) {\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)));\n    }\n  }\n\n  makeLabels();\n  let total = chartValues.reduce((accum, curr) => {\n    return accum + curr;\n  }, 0);\n  let average = total / chartValues.length;\n  let data = {\n    labels: labels,\n    datasets: [{\n      label: \"Spam messages received per second\",\n      fillColor: \"rgba(220,220,220,0.2)\",\n      lineTension: 0.1,\n      strokeColor: \"rgba(220,220,220,1)\",\n      pointColor: \"rgba(220,220,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,220,1)\",\n      data: chartValues\n    }]\n  };\n  let chartOptions = {\n    animation: {\n      duration: 0\n    }\n  };\n\n  function onMessageChange(evt) {\n    console.log('evt.target.value:', evt.target.value);\n    updateCurrentMessage(evt.target.value);\n  }\n\n  function onClickSend(evt) {\n    console.log('currentMessage:', currentMessage);\n    console.log('messages:', messages);\n    updateCurrentMessage('');\n    messages.push({\n      user: 'me',\n      message: currentMessage\n    });\n  }\n\n  let displayMessages = messages.map(msg => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: msg.user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 12\n      }\n    }, msg.message);\n  }); //let messages = [];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }\n  }, \"Spaminator\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }, \"The Enterprise Spam Real Time Monitor - Displaying Your Spam By The Second\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lineChartContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data || {},\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }, 'Spam messages received just this last second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }\n  }, chartValues[chartValues.length - 1] + ' at ' + new Date(Date.now()).toLocaleString()), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }\n  }, 'Average number of spam messages per second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }\n  }, Math.floor(average)), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'd3BarChartContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BarChartD3, {\n    data: chartValues,\n    size: [400, 300],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'threeContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ThreeAnim1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'changeContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: 'changeHeader',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  }, \"Jordi's Bot\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 11\n    }\n  }, \"How can I help you?\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'changeContent',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }, displayMessages), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'changeFooter',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    width: 150,\n    className: 'messageInput',\n    type: 'text',\n    value: currentMessage,\n    onChange: evt => {\n      onMessageChange(evt);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: evt => {\n      onClickSend(evt);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }, \"send\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'mapContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeoMap1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/App.js"],"names":["React","useState","useEffect","createStore","Line","BarChartD3","GeoMap1","ThreeAnim1","defaultState","chartValues","MAX_CHART_VALS","App","updateChartValues","currentMessage","updateCurrentMessage","messages","updateMessages","store","reducer","state","action","type","chartValuesTemp","concat","push","value","length","shift","find_max_sum","arr","currentItem","lastItem","secondLastItem","sum","forEach","item","index","addedLastItem","deletedLastItem","console","log","find_max_sum2","items","finalItems","sort","a","b","okToPush","find","it","final","user","message","subscribe","getState","setInterval","dispatch","Math","floor","random","formatTime","labels","makeLabel","timestamp","getHours","getMinutes","getSeconds","makeLabels","currentSecond","Date","now","i","total","reduce","accum","curr","average","data","datasets","label","fillColor","lineTension","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","chartOptions","animation","duration","onMessageChange","evt","target","onClickSend","displayMessages","map","msg","toLocaleString"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { createStore } from 'redux'\nimport {Line} from \"react-chartjs-2\";\nimport BarChartD3 from './BarChartD3.js'\nimport GeoMap1 from './GeoMap1.js'\nimport ThreeAnim1 from './ThreeAnim1.js'\n\nlet defaultState = {\n  chartValues:[]\n}\nconst MAX_CHART_VALS = 10//600//10 minutes\n\nfunction App() {\n\n  const [chartValues, updateChartValues] = useState([])\n  const [currentMessage, updateCurrentMessage] = useState([])\n  const [messages, updateMessages] = useState([])\n  const store = createStore(reducer)\n  function reducer(state=defaultState, action) {\n    switch (action.type) {\n      case 'UPDATE_CHART':\n        let chartValuesTemp = state.chartValues.concat([])\n        chartValuesTemp.push(action.value)\n        if(chartValuesTemp.length > MAX_CHART_VALS){\n          chartValuesTemp.shift()\n        }\n        return {...state,chartValues:chartValuesTemp}\n      default:\n        return state\n    }\n  }\n\n  useEffect(()=>{\n\n\n    function find_max_sum(arr){\n      let currentItem = 0\n      let lastItem = 0\n      let secondLastItem = 0\n      let sum = 0\n      arr.forEach((item, index)=>{\n        let addedLastItem = false\n        let deletedLastItem = false\n        console.log('start item:'+item+', lastItem:'+lastItem+', secondLastItem:'+secondLastItem+', sum:'+ sum)\n        if(index===0){\n\n          sum += item\n          addedLastItem = true\n          lastItem = item\n        }else if(item > lastItem){\n          //currentItem = item;\n          //console.log('item>lastItem==>start==>sum:'+ sum)\n          sum -= lastItem\n          //if(secondLastItem > lastItem){\n            sum += secondLastItem\n          //}\n\n          sum += item\n          addedLastItem = true\n          secondLastItem = lastItem\n          lastItem = item\n          deletedLastItem = true;\n          //console.log('item>lastItem==>done==>sum:'+ sum)\n\n        }else if(item===lastItem || item < lastItem){\n          //console.log('item===lastItem==>start==>deletedLastItem:'+deletedLastItem+', sum:'+ sum)\n          if(deletedLastItem){\n            sum+=secondLastItem\n          }\n          secondLastItem = lastItem\n          lastItem = item\n          //console.log('item===lastItem==>done==>sum:'+ sum)\n        }\n        console.log('done item:'+item+', lastItem:'+lastItem+', secondLastItem:'+secondLastItem+', sum:'+ sum)\n      })\n      console.log(sum)\n    }\n\n    function find_max_sum2(arr){\n      let items = [];\n      let finalItems = []\n      let sum=0\n\n      //make an array of objects with both value and index\n      arr.forEach((item, index)=>{\n        items.push({value:item,index})\n      })\n      //sort them by value\n      items.sort((a,b)=>{\n        if(a.value < b.value){\n          return 1\n        }else if(a.value > b.value){\n          return -1\n        }else{\n          return 0\n        }\n      })\n      //start with the highest values, push everything that is not at an adjacent index to something already there into finalItems\n      items.forEach((item)=>{\n        let okToPush = !finalItems.find((it)=>{\n          if(it.index===item.index-1 || it.index===item.index+1){\n            return true\n          }\n        })\n        if(okToPush){\n          finalItems.push(item)\n        }\n      })\n      //add up the values in finalItems, that will be the highest possible sum available from the array\n      finalItems.forEach((final)=>{\n        sum += final.value\n      })\n      console.log('sum:', sum)\n    }\n\n    //find_max_sum([1,2,3,1,5])\n\n\n    //find_max_sum2([1,2,3,4])\n    //find_max_sum2([1,2,3,4,1,2,3,4])\n    find_max_sum2([1,5,10,100,10,5])//\n\n\n    //figurePi for Eargo//\n    // function figurePi(sideLength){\n    //   let approxPi = 0\n    //   let radius = sideLength/2\n    //   let inside = 0\n    //   let total = 0\n    //   for(let i=0;i<sideLength;i+=1){\n    //     for(let j=0;j<sideLength;j+=1){\n    //       let distanceToPoint = Math.floor(Math.sqrt(((i/2)*(i/2))+((j/2)*(j/2))))\n    //       if(distanceToPoint < radius){\n    //         inside +=1\n    //       }\n    //       total+=1\n    //     }\n    //   }\n    //   let ratio = inside/total\n    //   let areaOfSquare = sideLength * sideLength\n    //   let areaOfCircle = areaOfSquare * ratio\n    //   approxPi = areaOfCircle/(radius*radius)\n    //   console.log('approxPi:', approxPi)\n    //\n    // }\n    // let pi = figurePi(100000)\n    //100 iterations approxPi: 3.1796\n    //1000 iterations approxPi: 3.14552\n    //10000 approxPi: 3.14199016\n    //100000 approxPi: 3.1416325412\n\n    // function fib(max){\n    //   let arr = [1,1]\n    //   // let acc = 0\n    //   // while(acc<max){\n    //   //   acc = arr[arr.length-1]+arr[arr.length-2]\n    //   //   console.log('acc:', acc)\n    //   //   arr.push(acc)\n    //   // }\n    //   console.log('arr:', arr)\n    // }\n    // fib(50)\n\n\n    messages.push({user:'system', message:'how can I help you'})\n\n    store.subscribe(() => {\n      let state = store.getState()\n      updateChartValues(state.chartValues)\n    })\n    setInterval(()=>{\n      store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n    },1000)\n\n  },[])\n\n  function formatTime(value){\n    if(value < 10){\n      return '0'+value\n    }\n    return value\n  }\n\n  let labels = []\n  function makeLabel(timestamp){\n    return formatTime(timestamp.getHours())+':'+formatTime(timestamp.getMinutes())+':'+formatTime(timestamp.getSeconds())\n  }\n\n  function makeLabels(){\n    let currentSecond = new Date(Date.now())\n    for(let i=chartValues.length-1;i>=0;i-=1){\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)))\n    }\n  }\n  makeLabels()\n  let total = chartValues.reduce((accum,curr)=>{return accum+curr},0)\n  let average = total/chartValues.length\n\n  let data = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"Spam messages received per second\",\n        fillColor: \"rgba(220,220,220,0.2)\",\n        lineTension:0.1,\n        strokeColor: \"rgba(220,220,220,1)\",\n        pointColor: \"rgba(220,220,220,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(220,220,220,1)\",\n        data: chartValues\n      }\n    ]\n  };\n  let chartOptions={\n    animation:{\n      duration: 0\n    }\n  }\n\n  function onMessageChange(evt){\n    console.log('evt.target.value:', evt.target.value)\n    updateCurrentMessage(evt.target.value)\n  }\n\n  function onClickSend(evt){\n    console.log('currentMessage:', currentMessage)\n    console.log('messages:', messages)\n    updateCurrentMessage('')\n    messages.push({user:'me', message:currentMessage})\n  }\n\n  let displayMessages = messages.map((msg)=>{\n    return <div className={msg.user}>{msg.message}</div>\n  })\n\n  //let messages = [];\n\n\n  return (\n    <div className=\"App\">\n      <h4>Spaminator</h4>\n      <h5>The Enterprise Spam Real Time Monitor - Displaying Your Spam By The Second</h5>\n      <div className='lineChartContainer'>\n        <Line data={data || {}} options={chartOptions} />\n      </div>\n\n      <div>{'Spam messages received just this last second:'}</div>\n      <div>{chartValues[chartValues.length-1]+' at '+new Date(Date.now()).toLocaleString()}</div>\n      <div>{'Average number of spam messages per second:'}</div>\n      <div>{Math.floor(average)}</div>\n      <div className={'d3BarChartContainer'}>\n        <BarChartD3 data={chartValues} size={[400, 300]} />\n      </div>\n      <div className={'threeContainer'}>\n        <ThreeAnim1/>\n      </div>\n      <div className={'changeContainer'}>\n        <div className={'changeHeader'}>\n          <span>Jordi's Bot</span>\n          <span>How can I help you?</span>\n        </div>\n        <div className={'changeContent'}>\n          {displayMessages}\n        </div>\n        <div className={'changeFooter'}>\n          <input width={150} className={'messageInput'} type={'text'} value={currentMessage} onChange={(evt)=>{onMessageChange(evt)}}/>\n          <button onClick={(evt)=>{onClickSend(evt)}}>send</button>\n        </div>\n\n      </div>\n      <div className={'mapContainer'}>\n        <GeoMap1/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}