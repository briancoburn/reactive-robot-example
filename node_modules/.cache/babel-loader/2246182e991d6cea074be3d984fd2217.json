{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { createStore } from 'redux';\nimport { Line } from \"react-chartjs-2\";\nimport BarChartD3 from './BarChartD3.js';\nimport GeoMap1 from './GeoMap1.js';\nimport ThreeAnim1 from './ThreeAnim1.js';\nimport reducer from './Reducer';\nimport ChangeHealthcare1 from './ChangeHealthcare1';\nimport find_max_sum2 from \"./ChangeHealthcare2\";\n\nfunction App() {\n  const [chartValues, updateChartValues] = useState([]);\n  const store = createStore(reducer);\n  useEffect(() => {\n    //find_max_sum2([1,2,3,4])//6\n    //find_max_sum2([1,2,3,4,1,2,3,4])//12\n    //find_max_sum2([1,5,10,100,10,5])//110\n    //find_max_sum2([1,20,30,5,10,100,101,102,90,10,5])//243\n    //figurePi for Eargo//\n    // function figurePi(sideLength){\n    //   let approxPi = 0\n    //   let radius = sideLength/2\n    //   let inside = 0\n    //   let total = 0\n    //   for(let i=0;i<sideLength;i+=1){\n    //     for(let j=0;j<sideLength;j+=1){\n    //       let distanceToPoint = Math.floor(Math.sqrt(((i/2)*(i/2))+((j/2)*(j/2))))\n    //       if(distanceToPoint < radius){\n    //         inside +=1\n    //       }\n    //       total+=1\n    //     }\n    //   }\n    //   let ratio = inside/total\n    //   let areaOfSquare = sideLength * sideLength\n    //   let areaOfCircle = areaOfSquare * ratio\n    //   approxPi = areaOfCircle/(radius*radius)\n    //   console.log('approxPi:', approxPi)\n    //\n    // }\n    // let pi = figurePi(100000)\n    //100 iterations approxPi: 3.1796\n    //1000 iterations approxPi: 3.14552\n    //10000 approxPi: 3.14199016\n    //100000 approxPi: 3.1416325412\n    // function fib(max){\n    //   let arr = [1,1]\n    //   // let acc = 0\n    //   // while(acc<max){\n    //   //   acc = arr[arr.length-1]+arr[arr.length-2]\n    //   //   console.log('acc:', acc)\n    //   //   arr.push(acc)\n    //   // }\n    //   console.log('arr:', arr)\n    // }\n    // fib(50)\n    store.subscribe(() => {\n      let state = store.getState();\n      updateChartValues(state.chartValues);\n    });\n    setInterval(() => {\n      store.dispatch({\n        type: 'UPDATE_CHART',\n        value: Math.floor(Math.random() * 100)\n      });\n    }, 1000);\n  }, []);\n\n  function formatTime(value) {\n    if (value < 10) {\n      return '0' + value;\n    }\n\n    return value;\n  }\n\n  let labels = [];\n\n  function makeLabel(timestamp) {\n    return formatTime(timestamp.getHours()) + ':' + formatTime(timestamp.getMinutes()) + ':' + formatTime(timestamp.getSeconds());\n  }\n\n  function makeLabels() {\n    let currentSecond = new Date(Date.now());\n\n    for (let i = chartValues.length - 1; i >= 0; i -= 1) {\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)));\n    }\n  }\n\n  makeLabels();\n  let total = chartValues.reduce((accum, curr) => {\n    return accum + curr;\n  }, 0);\n  let average = total / chartValues.length;\n  let data = {\n    labels: labels,\n    datasets: [{\n      label: \"Spam messages received per second\",\n      fillColor: \"rgba(220,220,220,0.2)\",\n      lineTension: 0.1,\n      strokeColor: \"rgba(220,220,220,1)\",\n      pointColor: \"rgba(220,220,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,220,1)\",\n      data: chartValues\n    }]\n  };\n  let chartOptions = {\n    animation: {\n      duration: 0\n    }\n  }; //let messages = [];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"Spaminator\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, \"The Enterprise Spam Real Time Monitor - Displaying Your Spam By The Second\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lineChartContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data || {},\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, 'Spam messages received just this last second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, chartValues[chartValues.length - 1] + ' at ' + new Date(Date.now()).toLocaleString()), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, 'Average number of spam messages per second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, Math.floor(average)), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'd3BarChartContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BarChartD3, {\n    data: chartValues,\n    size: [400, 300],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'threeContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ThreeAnim1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ChangeHealthcare1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'mapContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeoMap1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/App.js"],"names":["React","useState","useEffect","createStore","Line","BarChartD3","GeoMap1","ThreeAnim1","reducer","ChangeHealthcare1","find_max_sum2","App","chartValues","updateChartValues","store","subscribe","state","getState","setInterval","dispatch","type","value","Math","floor","random","formatTime","labels","makeLabel","timestamp","getHours","getMinutes","getSeconds","makeLabels","currentSecond","Date","now","i","length","push","total","reduce","accum","curr","average","data","datasets","label","fillColor","lineTension","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","chartOptions","animation","duration","toLocaleString"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { createStore } from 'redux'\nimport {Line} from \"react-chartjs-2\";\nimport BarChartD3 from './BarChartD3.js'\nimport GeoMap1 from './GeoMap1.js'\nimport ThreeAnim1 from './ThreeAnim1.js'\nimport reducer from './Reducer'\nimport ChangeHealthcare1 from './ChangeHealthcare1'\nimport find_max_sum2 from \"./ChangeHealthcare2\";\n\n\nfunction App() {\n\n  const [chartValues, updateChartValues] = useState([])\n\n  const store = createStore(reducer)\n\n\n  useEffect(()=>{\n\n    //find_max_sum2([1,2,3,4])//6\n    //find_max_sum2([1,2,3,4,1,2,3,4])//12\n    //find_max_sum2([1,5,10,100,10,5])//110\n    //find_max_sum2([1,20,30,5,10,100,101,102,90,10,5])//243\n\n\n\n\n\n\n    //figurePi for Eargo//\n    // function figurePi(sideLength){\n    //   let approxPi = 0\n    //   let radius = sideLength/2\n    //   let inside = 0\n    //   let total = 0\n    //   for(let i=0;i<sideLength;i+=1){\n    //     for(let j=0;j<sideLength;j+=1){\n    //       let distanceToPoint = Math.floor(Math.sqrt(((i/2)*(i/2))+((j/2)*(j/2))))\n    //       if(distanceToPoint < radius){\n    //         inside +=1\n    //       }\n    //       total+=1\n    //     }\n    //   }\n    //   let ratio = inside/total\n    //   let areaOfSquare = sideLength * sideLength\n    //   let areaOfCircle = areaOfSquare * ratio\n    //   approxPi = areaOfCircle/(radius*radius)\n    //   console.log('approxPi:', approxPi)\n    //\n    // }\n    // let pi = figurePi(100000)\n    //100 iterations approxPi: 3.1796\n    //1000 iterations approxPi: 3.14552\n    //10000 approxPi: 3.14199016\n    //100000 approxPi: 3.1416325412\n\n    // function fib(max){\n    //   let arr = [1,1]\n    //   // let acc = 0\n    //   // while(acc<max){\n    //   //   acc = arr[arr.length-1]+arr[arr.length-2]\n    //   //   console.log('acc:', acc)\n    //   //   arr.push(acc)\n    //   // }\n    //   console.log('arr:', arr)\n    // }\n    // fib(50)\n\n\n\n\n    store.subscribe(() => {\n      let state = store.getState()\n      updateChartValues(state.chartValues)\n    })\n    setInterval(()=>{\n      store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n    },1000)\n\n  },[])\n\n  function formatTime(value){\n    if(value < 10){\n      return '0'+value\n    }\n    return value\n  }\n\n  let labels = []\n  function makeLabel(timestamp){\n    return formatTime(timestamp.getHours())+':'+formatTime(timestamp.getMinutes())+':'+formatTime(timestamp.getSeconds())\n  }\n\n  function makeLabels(){\n    let currentSecond = new Date(Date.now())\n    for(let i=chartValues.length-1;i>=0;i-=1){\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)))\n    }\n  }\n  makeLabels()\n  let total = chartValues.reduce((accum,curr)=>{return accum+curr},0)\n  let average = total/chartValues.length\n\n  let data = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"Spam messages received per second\",\n        fillColor: \"rgba(220,220,220,0.2)\",\n        lineTension:0.1,\n        strokeColor: \"rgba(220,220,220,1)\",\n        pointColor: \"rgba(220,220,220,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(220,220,220,1)\",\n        data: chartValues\n      }\n    ]\n  };\n  let chartOptions={\n    animation:{\n      duration: 0\n    }\n  }\n\n\n\n  //let messages = [];\n\n\n  return (\n    <div className=\"App\">\n      <h4>Spaminator</h4>\n      <h5>The Enterprise Spam Real Time Monitor - Displaying Your Spam By The Second</h5>\n      <div className='lineChartContainer'>\n        <Line data={data || {}} options={chartOptions} />\n      </div>\n\n      <div>{'Spam messages received just this last second:'}</div>\n      <div>{chartValues[chartValues.length-1]+' at '+new Date(Date.now()).toLocaleString()}</div>\n      <div>{'Average number of spam messages per second:'}</div>\n      <div>{Math.floor(average)}</div>\n      <div className={'d3BarChartContainer'}>\n        <BarChartD3 data={chartValues} size={[400, 300]} />\n      </div>\n      <div className={'threeContainer'}>\n        <ThreeAnim1/>\n      </div>\n      <ChangeHealthcare1/>\n      <div className={'mapContainer'}>\n        <GeoMap1/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}