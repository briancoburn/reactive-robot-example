{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/reactive_robot/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport DataService from \"./DataService\";\nimport ReactiveRobot from './ReactiveRobot';\nlet ds;\nlet rr;\n\nfunction App() {\n  const [chartValues, updateChartValues] = useState([]); //const store = createStore(reducer)\n\n  useEffect(() => {\n    ds = new DataService();\n    rr = new ReactiveRobot(); //console.log('RR.addObserver:', RR.addObserver)\n\n    rr.addObserver(this); // store.subscribe(() => {\n    //   let state = store.getState()\n    //   updateChartValues(state.chartValues)\n    // })\n    //\n    // setInterval(()=>{\n    //   store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n    // },1000)\n  }, []);\n\n  function onEvent(event) {\n    switch (event.type) {\n      case 'test':\n        console.log('App==>got test event');\n    }\n  } // let total = chartValues.reduce((accum,curr)=>{return accum+curr},0)\n  // let average = total/chartValues.length\n  //let messages = [];\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, \"App\");\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/reactive_robot/src/App.js"],"names":["React","useState","useEffect","DataService","ReactiveRobot","ds","rr","App","chartValues","updateChartValues","addObserver","onEvent","event","type","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,IAAIC,EAAJ;AACA,IAAIC,EAAJ;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,WAAD,EAAcC,iBAAd,IAAmCR,QAAQ,CAAC,EAAD,CAAjD,CADa,CAEb;;AAGAC,EAAAA,SAAS,CAAC,MAAI;AACZG,IAAAA,EAAE,GAAG,IAAIF,WAAJ,EAAL;AACAG,IAAAA,EAAE,GAAG,IAAIF,aAAJ,EAAL,CAFY,CAGZ;;AACAE,IAAAA,EAAE,CAACI,WAAH,CAAe,IAAf,EAJY,CAKZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,GAdQ,EAcP,EAdO,CAAT;;AAgBA,WAASC,OAAT,CAAiBC,KAAjB,EAAuB;AACrB,YAAQA,KAAK,CAACC,IAAd;AACE,WAAK,MAAL;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAFJ;AAID,GA1BY,CA4Bb;AACA;AACA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAKD;;AAED,eAAeR,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport DataService from \"./DataService\";\n\nimport ReactiveRobot from './ReactiveRobot'\nlet ds;\nlet rr;\n\nfunction App() {\n  const [chartValues, updateChartValues] = useState([])\n  //const store = createStore(reducer)\n\n\n  useEffect(()=>{\n    ds = new DataService()\n    rr = new ReactiveRobot()\n    //console.log('RR.addObserver:', RR.addObserver)\n    rr.addObserver(this)\n    // store.subscribe(() => {\n    //   let state = store.getState()\n    //   updateChartValues(state.chartValues)\n    // })\n    //\n    // setInterval(()=>{\n    //   store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n    // },1000)\n\n  },[])\n\n  function onEvent(event){\n    switch (event.type){\n      case 'test':\n        console.log('App==>got test event')\n    }\n  }\n\n  // let total = chartValues.reduce((accum,curr)=>{return accum+curr},0)\n  // let average = total/chartValues.length\n  //let messages = [];\n\n  return (\n    <div className=\"App\">\n      App\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}