{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/App.js\";\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { createStore } from 'redux';\nimport { Line, Doughnut } from \"react-chartjs-2\";\n\nvar Chart = require('chart.js');\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\n\nlet defaultState = {\n  chartValues: [1, 2, 5, 2, 7, 9, 3, 4]\n};\nconst MAX_CHART_VALS = 10;\n\nfunction App() {\n  const [chartValues, updateChartValues] = useState([]);\n\n  function reducer(state = defaultState, action) {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1;\n\n      case 'DECREMENT':\n        return state - 1;\n\n      case 'UPDATE_CHART':\n        console.log('UPDATE_CHART==>action.value:' + action.value);\n        console.log('UPDATE_CHART==>state.chartValues:' + state.chartValues);\n        let chartValuesTemp = state.chartValues;\n        chartValuesTemp.push(action.value);\n\n        if (chartValuesTemp.length > MAX_CHART_VALS) {\n          chartValuesTemp.shift();\n        }\n\n        return { ...state,\n          chartValues: chartValuesTemp\n        };\n\n      default:\n        return state;\n    }\n  }\n\n  let store = createStore(reducer);\n  store.subscribe(() => {\n    let state = store.getState(); //console.log('state:', state)\n\n    updateChartValues(state.chartValues);\n  });\n  setInterval(() => {\n    store.dispatch({\n      type: 'UPDATE_CHART',\n      value: Math.floor(Math.random() * 100)\n    });\n  }, 1000); // The only way to mutate the internal state is to dispatch an action.\n  // The actions can be serialized, logged or stored and later replayed.\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 1\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 2\n  // store.dispatch({ type: 'DECREMENT' })\n  // 1\n  //console.log('chartValues:', chartValues)\n\n  let data = {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n    datasets: [{\n      label: \"Recruiters contacted per day\",\n      fillColor: \"rgba(220,220,220,0.2)\",\n      strokeColor: \"rgba(220,220,220,1)\",\n      pointColor: \"rgba(220,220,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,220,1)\",\n      data: chartValues\n    }]\n  }; // let data =\n  //   {\n  //     labels:['a','b','c','d'],\n  //     dataSets:[{\n  //       type:'line',\n  //       backgroundColor: \"rgba(142, 243, 197, 0.5)\",\n  //       pointBackgroundColor: \"#fff\",\n  //       pointHoverBackgroundColor: '#fff',\n  //       pointStyle: \"circle\",\n  //       label: \"Monthly Expenses\",\n  //       borderColor: \"#2be1d8\",\n  //       borderWidth: 3,\n  //       borderJoinStyle: \"round\",\n  //       lineTension: 0.3,\n  //       fontColor: \"#fff\",\n  //       hitRadius: 5,\n  //       hoverRadius: 8,\n  //       radius: 4,\n  //       data: chartValues\n  //     }]\n  //   }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data || {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/App.js"],"names":["React","useState","createStore","Line","Doughnut","Chart","require","defaultState","chartValues","MAX_CHART_VALS","App","updateChartValues","reducer","state","action","type","console","log","value","chartValuesTemp","push","length","shift","store","subscribe","getState","setInterval","dispatch","Math","floor","random","data","labels","datasets","label","fillColor","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,OAAO,WAAP;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAAQC,IAAR,EAAcC,QAAd,QAA6B,iBAA7B;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf;AADK,CAAnB;AAGA,MAAMC,cAAc,GAAG,EAAvB;;AAEA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACF,WAAD,EAAcG,iBAAd,IAAmCV,QAAQ,CAAC,EAAD,CAAjD;;AACA,WAASW,OAAT,CAAiBC,KAAK,GAACN,YAAvB,EAAqCO,MAArC,EAA6C;AAC3C,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,WAAL;AACE,eAAOF,KAAK,GAAG,CAAf;;AACF,WAAK,WAAL;AACE,eAAOA,KAAK,GAAG,CAAf;;AACF,WAAK,cAAL;AACEG,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAA+BH,MAAM,CAACI,KAAlD;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAoCJ,KAAK,CAACL,WAAtD;AACA,YAAIW,eAAe,GAAGN,KAAK,CAACL,WAA5B;AACAW,QAAAA,eAAe,CAACC,IAAhB,CAAqBN,MAAM,CAACI,KAA5B;;AACA,YAAGC,eAAe,CAACE,MAAhB,GAAyBZ,cAA5B,EAA2C;AACzCU,UAAAA,eAAe,CAACG,KAAhB;AACD;;AACD,eAAO,EAAC,GAAGT,KAAJ;AAAUL,UAAAA,WAAW,EAACW;AAAtB,SAAP;;AACF;AACE,eAAON,KAAP;AAfJ;AAiBD;;AACD,MAAIU,KAAK,GAAGrB,WAAW,CAACU,OAAD,CAAvB;AACAW,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpB,QAAIX,KAAK,GAAGU,KAAK,CAACE,QAAN,EAAZ,CADoB,CAEpB;;AACAd,IAAAA,iBAAiB,CAACE,KAAK,CAACL,WAAP,CAAjB;AACD,GAJD;AAKAkB,EAAAA,WAAW,CAAC,MAAI;AACdH,IAAAA,KAAK,CAACI,QAAN,CAAe;AAACZ,MAAAA,IAAI,EAAC,cAAN;AAAsBG,MAAAA,KAAK,EAAEU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B;AAA7B,KAAf;AACD,GAFU,EAET,IAFS,CAAX,CA5Ba,CA+Bb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,CADC;AAETC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,8BADT;AAEEC,MAAAA,SAAS,EAAE,uBAFb;AAGEC,MAAAA,WAAW,EAAE,qBAHf;AAIEC,MAAAA,UAAU,EAAE,qBAJd;AAKEC,MAAAA,gBAAgB,EAAE,MALpB;AAMEC,MAAAA,kBAAkB,EAAE,MANtB;AAOEC,MAAAA,oBAAoB,EAAE,qBAPxB;AAQET,MAAAA,IAAI,EAAEvB;AARR,KADQ;AAFD,GAAX,CAzCa,CAwDb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEuB,IAAI,IAAI,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAerB,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { createStore } from 'redux'\nimport {Line, Doughnut} from \"react-chartjs-2\";\nvar Chart = require('chart.js');\n\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\nlet defaultState = {\n  chartValues:[1,2,5,2,7,9,3,4]\n}\nconst MAX_CHART_VALS = 10\n\nfunction App() {\n\n  const [chartValues, updateChartValues] = useState([])\n  function reducer(state=defaultState, action) {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1\n      case 'DECREMENT':\n        return state - 1\n      case 'UPDATE_CHART':\n        console.log('UPDATE_CHART==>action.value:'+action.value)\n        console.log('UPDATE_CHART==>state.chartValues:'+state.chartValues)\n        let chartValuesTemp = state.chartValues\n        chartValuesTemp.push(action.value)\n        if(chartValuesTemp.length > MAX_CHART_VALS){\n          chartValuesTemp.shift()\n        }\n        return {...state,chartValues:chartValuesTemp}\n      default:\n        return state\n    }\n  }\n  let store = createStore(reducer)\n  store.subscribe(() => {\n    let state = store.getState()\n    //console.log('state:', state)\n    updateChartValues(state.chartValues)\n  })\n  setInterval(()=>{\n    store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n  },1000)\n  // The only way to mutate the internal state is to dispatch an action.\n  // The actions can be serialized, logged or stored and later replayed.\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 1\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 2\n  // store.dispatch({ type: 'DECREMENT' })\n  // 1\n  //console.log('chartValues:', chartValues)\n\n  let data = {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n    datasets: [\n      {\n        label: \"Recruiters contacted per day\",\n        fillColor: \"rgba(220,220,220,0.2)\",\n        strokeColor: \"rgba(220,220,220,1)\",\n        pointColor: \"rgba(220,220,220,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(220,220,220,1)\",\n        data: chartValues\n      }\n    ]\n  };\n  // let data =\n  //   {\n  //     labels:['a','b','c','d'],\n  //     dataSets:[{\n  //       type:'line',\n  //       backgroundColor: \"rgba(142, 243, 197, 0.5)\",\n  //       pointBackgroundColor: \"#fff\",\n  //       pointHoverBackgroundColor: '#fff',\n  //       pointStyle: \"circle\",\n  //       label: \"Monthly Expenses\",\n  //       borderColor: \"#2be1d8\",\n  //       borderWidth: 3,\n  //       borderJoinStyle: \"round\",\n  //       lineTension: 0.3,\n  //       fontColor: \"#fff\",\n  //       hitRadius: 5,\n  //       hoverRadius: 8,\n  //       radius: 4,\n  //       data: chartValues\n  //     }]\n  //   }\n  return (\n    <div className=\"App\">\n      <Line data={data || {}} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}