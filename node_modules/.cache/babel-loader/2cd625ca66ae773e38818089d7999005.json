{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { createStore } from 'redux';\nimport { Line } from \"react-chartjs-2\";\nimport BarChartD3 from './BarChartD3.js';\nlet defaultState = {\n  chartValues: []\n};\nconst MAX_CHART_VALS = 10; //600//10 minutes\n\nfunction App() {\n  const [chartValues, updateChartValues] = useState([]);\n  const store = createStore(reducer);\n\n  function reducer(state = defaultState, action) {\n    switch (action.type) {\n      case 'UPDATE_CHART':\n        let chartValuesTemp = state.chartValues.concat([]);\n        chartValuesTemp.push(action.value);\n\n        if (chartValuesTemp.length > MAX_CHART_VALS) {\n          chartValuesTemp.shift();\n        }\n\n        return { ...state,\n          chartValues: chartValuesTemp\n        };\n\n      default:\n        return state;\n    }\n  }\n\n  useEffect(() => {\n    function figurePi(sideLength) {\n      let radius = sideLength / 2;\n      let inside = 0;\n      let total = 0;\n\n      for (let i = 0; i < sideLength; i += 1) {\n        for (let j = 0; j < sideLength; j += 1) {\n          let distanceToPoint = Math.floor(Math.sqrt(i / 2 * (i / 2) + j / 2 * (j / 2)));\n          console.log('i:' + i + ', j' + j + ' distanceToPoint:' + distanceToPoint + ', radius:', radius);\n\n          if (distanceToPoint < radius) {\n            inside += 1;\n          }\n\n          total += 1;\n        }\n      }\n\n      let ratio = inside / total;\n      console.log('ratio:', ratio); //here we should be able to get the area of the square and the are of the circle, knowing the relationship is ratio\n      //so...if we know the area of the bounding square, and we know the area of the inner circle, pi remains the one unknown variable\n\n      let areaOfSquare = sideLength * sideLength;\n    }\n\n    let pi = figurePi(100);\n    store.subscribe(() => {\n      let state = store.getState();\n      updateChartValues(state.chartValues);\n    });\n    setInterval(() => {\n      store.dispatch({\n        type: 'UPDATE_CHART',\n        value: Math.floor(Math.random() * 100)\n      });\n    }, 1000);\n  }, []);\n\n  function formatTime(value) {\n    if (value < 10) {\n      return '0' + value;\n    }\n\n    return value;\n  }\n\n  let labels = [];\n\n  function makeLabel(timestamp) {\n    return formatTime(timestamp.getHours()) + ':' + formatTime(timestamp.getMinutes()) + ':' + formatTime(timestamp.getSeconds());\n  }\n\n  function makeLabels() {\n    let currentSecond = new Date(Date.now());\n\n    for (let i = chartValues.length - 1; i >= 0; i -= 1) {\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)));\n    }\n  }\n\n  makeLabels();\n  let total = chartValues.reduce((accum, curr) => {\n    return accum + curr;\n  }, 0);\n  let average = total / chartValues.length;\n  let data = {\n    labels: labels,\n    datasets: [{\n      label: \"Spam messages received per second\",\n      fillColor: \"rgba(220,220,220,0.2)\",\n      lineTension: 0.1,\n      strokeColor: \"rgba(220,220,220,1)\",\n      pointColor: \"rgba(220,220,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,220,1)\",\n      data: chartValues\n    }]\n  };\n  let chartOptions = {\n    animation: {\n      duration: 0\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"Spaminator\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, \"The Enterprise Spam Real Time Monitor - Displaying Your Spam By The Second\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lineChartContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data || {},\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, 'Spam messages received just this last second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, chartValues[chartValues.length - 1] + ' at ' + new Date(Date.now()).toLocaleString()), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, 'Average number of spam messages per second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, Math.floor(average)), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'd3BarChartContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BarChartD3, {\n    data: chartValues,\n    size: [400, 300],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/App.js"],"names":["React","useState","useEffect","createStore","Line","BarChartD3","defaultState","chartValues","MAX_CHART_VALS","App","updateChartValues","store","reducer","state","action","type","chartValuesTemp","concat","push","value","length","shift","figurePi","sideLength","radius","inside","total","i","j","distanceToPoint","Math","floor","sqrt","console","log","ratio","areaOfSquare","pi","subscribe","getState","setInterval","dispatch","random","formatTime","labels","makeLabel","timestamp","getHours","getMinutes","getSeconds","makeLabels","currentSecond","Date","now","reduce","accum","curr","average","data","datasets","label","fillColor","lineTension","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","chartOptions","animation","duration","toLocaleString"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { createStore } from 'redux'\nimport {Line} from \"react-chartjs-2\";\nimport BarChartD3 from './BarChartD3.js'\n\nlet defaultState = {\n  chartValues:[]\n}\nconst MAX_CHART_VALS = 10//600//10 minutes\n\nfunction App() {\n\n  const [chartValues, updateChartValues] = useState([])\n  const store = createStore(reducer)\n  function reducer(state=defaultState, action) {\n    switch (action.type) {\n      case 'UPDATE_CHART':\n        let chartValuesTemp = state.chartValues.concat([])\n        chartValuesTemp.push(action.value)\n        if(chartValuesTemp.length > MAX_CHART_VALS){\n          chartValuesTemp.shift()\n        }\n        return {...state,chartValues:chartValuesTemp}\n      default:\n        return state\n    }\n  }\n\n  useEffect(()=>{\n\n    function figurePi(sideLength){\n      let radius = sideLength/2\n      let inside = 0\n      let total = 0\n      for(let i=0;i<sideLength;i+=1){\n        for(let j=0;j<sideLength;j+=1){\n          let distanceToPoint = Math.floor(Math.sqrt(((i/2)*(i/2))+((j/2)*(j/2))))\n          console.log('i:' + i + ', j' + j + ' distanceToPoint:'+distanceToPoint+', radius:', radius)\n          if(distanceToPoint < radius){\n            inside +=1\n          }\n          total+=1\n        }\n      }\n      let ratio = inside/total\n      console.log('ratio:', ratio)\n      //here we should be able to get the area of the square and the are of the circle, knowing the relationship is ratio\n      //so...if we know the area of the bounding square, and we know the area of the inner circle, pi remains the one unknown variable\n      let areaOfSquare = sideLength * sideLength\n\n\n\n    }\n    let pi = figurePi(100)\n\n    store.subscribe(() => {\n      let state = store.getState()\n      updateChartValues(state.chartValues)\n    })\n    setInterval(()=>{\n      store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n    },1000)\n\n  },[])\n\n  function formatTime(value){\n    if(value < 10){\n      return '0'+value\n    }\n    return value\n  }\n\n  let labels = []\n  function makeLabel(timestamp){\n    return formatTime(timestamp.getHours())+':'+formatTime(timestamp.getMinutes())+':'+formatTime(timestamp.getSeconds())\n  }\n\n  function makeLabels(){\n    let currentSecond = new Date(Date.now())\n    for(let i=chartValues.length-1;i>=0;i-=1){\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)))\n    }\n  }\n  makeLabels()\n  let total = chartValues.reduce((accum,curr)=>{return accum+curr},0)\n  let average = total/chartValues.length\n\n  let data = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"Spam messages received per second\",\n        fillColor: \"rgba(220,220,220,0.2)\",\n        lineTension:0.1,\n        strokeColor: \"rgba(220,220,220,1)\",\n        pointColor: \"rgba(220,220,220,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(220,220,220,1)\",\n        data: chartValues\n      }\n    ]\n  };\n  let chartOptions={\n    animation:{\n      duration: 0\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h4>Spaminator</h4>\n      <h5>The Enterprise Spam Real Time Monitor - Displaying Your Spam By The Second</h5>\n      <div className='lineChartContainer'>\n        <Line data={data || {}} options={chartOptions} />\n      </div>\n\n      <div>{'Spam messages received just this last second:'}</div>\n      <div>{chartValues[chartValues.length-1]+' at '+new Date(Date.now()).toLocaleString()}</div>\n      <div>{'Average number of spam messages per second:'}</div>\n      <div>{Math.floor(average)}</div>\n      <div className={'d3BarChartContainer'}>\n        <BarChartD3 data={chartValues} size={[400, 300]} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}