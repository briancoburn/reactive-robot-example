{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/reactive_robot/src/Component1.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Component1.css';\nimport * as rr from './ReactiveRobot';\nimport * as ev from './Events';\n\nfunction Component1(props) {\n  const [currentValue, setCurrentValue] = useState(`${props.name} inited at ${Date.now()}`); //const [name, setName] = useState('')\n\n  console.log('Component1==>rendering==>name:', props.name);\n  useEffect(() => {\n    rr.addObserver(onEvent);\n    console.log(`${this.props.name} sending ${ev.COMPONENT_UPDATE_GET}`);\n    rr.next({\n      type: ev.COMPONENT_UPDATE_GET,\n      data: {\n        name: props.name\n      }\n    });\n    return () => {\n      rr.removeObserver(onEvent);\n    }; //cleanup on unmount\n  }, []);\n\n  function onEvent(event) {\n    switch (event.type) {\n      case ev.COMPONENT1_TEST:\n        console.log('component1==>received COMPONENT1_TEST');\n        setCurrentValue(`${event.data.name} received at ${Date.now()}`);\n        break;\n\n      case ev.COMPONENT_UPDATE_RECEIVED:\n        console.log('component1==>received COMPONENT_UPDATE_RECEIVED==>event.data.name:' + event.data.name);\n\n        if (event.data.name === this.props.name) {\n          console.log('I got an event for me - I am ' + this.props.name);\n        }\n\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Component1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, props.name), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, currentValue));\n}\n\nexport default Component1;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/reactive_robot/src/Component1.js"],"names":["React","useState","useEffect","rr","ev","Component1","props","currentValue","setCurrentValue","name","Date","now","console","log","addObserver","onEvent","COMPONENT_UPDATE_GET","next","type","data","removeObserver","event","COMPONENT1_TEST","COMPONENT_UPDATE_RECEIVED"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,kBAAP;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAE,GAAEK,KAAK,CAACG,IAAK,cAAaC,IAAI,CAACC,GAAL,EAAW,EAAvC,CAAhD,CADyB,CAEzB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CP,KAAK,CAACG,IAApD;AACAP,EAAAA,SAAS,CAAC,MAAI;AACZC,IAAAA,EAAE,CAACW,WAAH,CAAeC,OAAf;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAE,KAAKP,KAAL,CAAWG,IAAK,YAAWL,EAAE,CAACY,oBAAqB,EAAlE;AACAb,IAAAA,EAAE,CAACc,IAAH,CAAQ;AAACC,MAAAA,IAAI,EAACd,EAAE,CAACY,oBAAT;AAA8BG,MAAAA,IAAI,EAAC;AAACV,QAAAA,IAAI,EAACH,KAAK,CAACG;AAAZ;AAAnC,KAAR;AACA,WAAO,MAAI;AAACN,MAAAA,EAAE,CAACiB,cAAH,CAAkBL,OAAlB;AAA2B,KAAvC,CAJY,CAI2B;AACxC,GALQ,EAKP,EALO,CAAT;;AAOA,WAASA,OAAT,CAAiBM,KAAjB,EAAuB;AACrB,YAAQA,KAAK,CAACH,IAAd;AAEE,WAAKd,EAAE,CAACkB,eAAR;AACEV,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACAL,QAAAA,eAAe,CAAE,GAAEa,KAAK,CAACF,IAAN,CAAWV,IAAK,gBAAeC,IAAI,CAACC,GAAL,EAAW,EAA9C,CAAf;AACA;;AACF,WAAKP,EAAE,CAACmB,yBAAR;AACEX,QAAAA,OAAO,CAACC,GAAR,CAAY,uEAAqEQ,KAAK,CAACF,IAAN,CAAWV,IAA5F;;AACA,YAAGY,KAAK,CAACF,IAAN,CAAWV,IAAX,KAAkB,KAAKH,KAAL,CAAWG,IAAhC,EAAqC;AACnCG,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAgC,KAAKP,KAAL,CAAWG,IAAvD;AACD;;AAVL;AAYD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOH,KAAK,CAACG,IAAb,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOF,YAAP,CAFF,CADF;AAMD;;AAED,eAAeF,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './Component1.css'\nimport * as rr from './ReactiveRobot'\nimport * as ev from './Events'\n\nfunction Component1(props) {\n  const [currentValue, setCurrentValue] = useState(`${props.name} inited at ${Date.now()}`)\n  //const [name, setName] = useState('')\n  console.log('Component1==>rendering==>name:', props.name)\n  useEffect(()=>{\n    rr.addObserver(onEvent)\n    console.log(`${this.props.name} sending ${ev.COMPONENT_UPDATE_GET}`)\n    rr.next({type:ev.COMPONENT_UPDATE_GET,data:{name:props.name}})\n    return ()=>{rr.removeObserver(onEvent)}//cleanup on unmount\n  },[])\n\n  function onEvent(event){\n    switch (event.type){\n\n      case ev.COMPONENT1_TEST:\n        console.log('component1==>received COMPONENT1_TEST')\n        setCurrentValue(`${event.data.name} received at ${Date.now()}`)\n        break;\n      case ev.COMPONENT_UPDATE_RECEIVED:\n        console.log('component1==>received COMPONENT_UPDATE_RECEIVED==>event.data.name:'+event.data.name)\n        if(event.data.name===this.props.name){\n          console.log('I got an event for me - I am '+this.props.name)\n        }\n    }\n  }\n  return (\n    <div className=\"Component1\">\n      <span>{props.name}</span>\n      <span>{currentValue}</span>\n    </div>\n  );\n}\n\nexport default Component1;\n"]},"metadata":{},"sourceType":"module"}