{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { createStore } from 'redux';\nimport BarChartD3 from './BarChartD3.js';\nimport LineChart from './LineChart.js';\nimport GeoMap1 from './GeoMap1.js';\nimport ThreeAnim1 from './ThreeAnim1.js';\nimport reducer from './Reducer';\nimport ChangeHealthcare1 from './ChangeHealthcare1';\nimport find_max_sum2 from \"./ChangeHealthcare2\";\nimport figurePi from \"./Eargo\";\n\nfunction App() {\n  const store = createStore(reducer);\n  useEffect(() => {\n    //code challenge for ChangeHealthcare\n    //find_max_sum2([1,2,3,4])//6\n    //find_max_sum2([1,2,3,4,1,2,3,4])//12\n    //find_max_sum2([1,5,10,100,10,5])//110\n    //find_max_sum2([1,20,30,5,10,100,101,102,90,10,5])//243\n    //code challenge for Eargo\n    // let pi = figurePi(100000)\n    //100 iterations approxPi: 3.1796\n    //1000 iterations approxPi: 3.14552\n    //10000 approxPi: 3.14199016\n    store.subscribe(() => {\n      let state = store.getState();\n      updateChartValues(state.chartValues);\n    });\n    setInterval(() => {\n      store.dispatch({\n        type: 'UPDATE_CHART',\n        value: Math.floor(Math.random() * 100)\n      });\n    }, 1000);\n  }, []); //let messages = [];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Spaminator\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"The Enterprise Spam Real Time Monitor - Displaying Your Spam By The Second\"), /*#__PURE__*/React.createElement(LineChart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, 'Spam messages received just this last second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, chartValues[chartValues.length - 1] + ' at ' + new Date(Date.now()).toLocaleString()), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, 'Average number of spam messages per second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, Math.floor(average)), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'd3BarChartContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BarChartD3, {\n    data: chartValues,\n    size: [400, 300],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'threeContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ThreeAnim1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ChangeHealthcare1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'mapContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeoMap1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/App.js"],"names":["React","useState","useEffect","createStore","BarChartD3","LineChart","GeoMap1","ThreeAnim1","reducer","ChangeHealthcare1","find_max_sum2","figurePi","App","store","subscribe","state","getState","updateChartValues","chartValues","setInterval","dispatch","type","value","Math","floor","random","length","Date","now","toLocaleString","average"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,QAAP,MAAqB,SAArB;;AAGA,SAASC,GAAT,GAAe;AAIb,QAAMC,KAAK,GAAGV,WAAW,CAACK,OAAD,CAAzB;AAGAN,EAAAA,SAAS,CAAC,MAAI;AAEZ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEAW,IAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpB,UAAIC,KAAK,GAAGF,KAAK,CAACG,QAAN,EAAZ;AACAC,MAAAA,iBAAiB,CAACF,KAAK,CAACG,WAAP,CAAjB;AACD,KAHD;AAIAC,IAAAA,WAAW,CAAC,MAAI;AACdN,MAAAA,KAAK,CAACO,QAAN,CAAe;AAACC,QAAAA,IAAI,EAAC,cAAN;AAAsBC,QAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B;AAA7B,OAAf;AACD,KAFU,EAET,IAFS,CAAX;AAID,GAtBQ,EAsBP,EAtBO,CAAT,CAPa,CAmCb;;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAFF,eAGE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,+CAAN,CALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMP,WAAW,CAACA,WAAW,CAACQ,MAAZ,GAAmB,CAApB,CAAX,GAAkC,MAAlC,GAAyC,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,EAAqBC,cAArB,EAA/C,CANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,6CAAN,CAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMN,IAAI,CAACC,KAAL,CAAWM,OAAX,CAAN,CARF,eASE;AAAK,IAAA,SAAS,EAAE,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEZ,WAAlB;AAA+B,IAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,eAYE;AAAK,IAAA,SAAS,EAAE,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAZF,eAeE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,eAgBE;AAAK,IAAA,SAAS,EAAE,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhBF,CADF;AAuBD;;AAED,eAAeN,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { createStore } from 'redux'\n\nimport BarChartD3 from './BarChartD3.js'\nimport LineChart from './LineChart.js'\nimport GeoMap1 from './GeoMap1.js'\nimport ThreeAnim1 from './ThreeAnim1.js'\nimport reducer from './Reducer'\nimport ChangeHealthcare1 from './ChangeHealthcare1'\nimport find_max_sum2 from \"./ChangeHealthcare2\";\nimport figurePi from \"./Eargo\";\n\n\nfunction App() {\n\n\n\n  const store = createStore(reducer)\n\n\n  useEffect(()=>{\n\n    //code challenge for ChangeHealthcare\n    //find_max_sum2([1,2,3,4])//6\n    //find_max_sum2([1,2,3,4,1,2,3,4])//12\n    //find_max_sum2([1,5,10,100,10,5])//110\n    //find_max_sum2([1,20,30,5,10,100,101,102,90,10,5])//243\n\n    //code challenge for Eargo\n    // let pi = figurePi(100000)\n    //100 iterations approxPi: 3.1796\n    //1000 iterations approxPi: 3.14552\n    //10000 approxPi: 3.14199016\n\n    store.subscribe(() => {\n      let state = store.getState()\n      updateChartValues(state.chartValues)\n    })\n    setInterval(()=>{\n      store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n    },1000)\n\n  },[])\n\n\n\n\n\n  //let messages = [];\n\n\n  return (\n    <div className=\"App\">\n      <h4>Spaminator</h4>\n      <h5>The Enterprise Spam Real Time Monitor - Displaying Your Spam By The Second</h5>\n      <LineChart/>\n\n      <div>{'Spam messages received just this last second:'}</div>\n      <div>{chartValues[chartValues.length-1]+' at '+new Date(Date.now()).toLocaleString()}</div>\n      <div>{'Average number of spam messages per second:'}</div>\n      <div>{Math.floor(average)}</div>\n      <div className={'d3BarChartContainer'}>\n        <BarChartD3 data={chartValues} size={[400, 300]} />\n      </div>\n      <div className={'threeContainer'}>\n        <ThreeAnim1/>\n      </div>\n      <ChangeHealthcare1/>\n      <div className={'mapContainer'}>\n        <GeoMap1/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}