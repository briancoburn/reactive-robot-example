{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/App.js\";\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Chart from './Chart';\nimport { createStore } from 'redux';\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\nlet defaultState = {\n  chartValues: []\n};\nconst MAX_CHART_VALS = 10;\n\nfunction App() {\n  const [chartValues, updateChartValues] = useState([]);\n\n  function reducer(state = defaultState, action) {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1;\n\n      case 'DECREMENT':\n        return state - 1;\n\n      case 'UPDATE_CHART':\n        console.log('UPDATE_CHART==>action.value:' + action.value);\n        let chartValues = state.chartValues;\n        chartValues.push(action.value);\n\n        if (chartValues.length > MAX_CHART_VALS) {\n          chartValues.shift();\n        }\n\n        return { ...state,\n          chartValues\n        };\n\n      default:\n        return state;\n    }\n  }\n\n  let store = createStore(reducer);\n  store.subscribe(() => {\n    let state = store.getState();\n    console.log('state:', state);\n    updateChartValues(state.chartValues);\n  });\n  setInterval(() => {\n    store.dispatch({\n      type: 'UPDATE_CHART',\n      value: Math.random() * 100\n    });\n  }, 1000); // The only way to mutate the internal state is to dispatch an action.\n  // The actions can be serialized, logged or stored and later replayed.\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 1\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 2\n  // store.dispatch({ type: 'DECREMENT' })\n  // 1\n  //console.log('counter:', counter)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Chart, {\n    data: store.getState().chartValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/App.js"],"names":["React","useState","Chart","createStore","defaultState","chartValues","MAX_CHART_VALS","App","updateChartValues","reducer","state","action","type","console","log","value","push","length","shift","store","subscribe","getState","setInterval","dispatch","Math","random"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAC;AADK,CAAnB;AAGA,MAAMC,cAAc,GAAG,EAAvB;;AAEA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACF,WAAD,EAAcG,iBAAd,IAAmCP,QAAQ,CAAC,EAAD,CAAjD;;AACA,WAASQ,OAAT,CAAiBC,KAAK,GAACN,YAAvB,EAAqCO,MAArC,EAA6C;AAC3C,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,WAAL;AACE,eAAOF,KAAK,GAAG,CAAf;;AACF,WAAK,WAAL;AACE,eAAOA,KAAK,GAAG,CAAf;;AACF,WAAK,cAAL;AACEG,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAA+BH,MAAM,CAACI,KAAlD;AACA,YAAIV,WAAW,GAAGK,KAAK,CAACL,WAAxB;AACAA,QAAAA,WAAW,CAACW,IAAZ,CAAiBL,MAAM,CAACI,KAAxB;;AACA,YAAGV,WAAW,CAACY,MAAZ,GAAqBX,cAAxB,EAAuC;AACrCD,UAAAA,WAAW,CAACa,KAAZ;AACD;;AACD,eAAO,EAAC,GAAGR,KAAJ;AAAUL,UAAAA;AAAV,SAAP;;AACF;AACE,eAAOK,KAAP;AAdJ;AAgBD;;AACD,MAAIS,KAAK,GAAGhB,WAAW,CAACM,OAAD,CAAvB;AACAU,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpB,QAAIV,KAAK,GAAGS,KAAK,CAACE,QAAN,EAAZ;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,KAAtB;AACAF,IAAAA,iBAAiB,CAACE,KAAK,CAACL,WAAP,CAAjB;AACD,GAJD;AAKAiB,EAAAA,WAAW,CAAC,MAAI;AACdH,IAAAA,KAAK,CAACI,QAAN,CAAe;AAACX,MAAAA,IAAI,EAAC,cAAN;AAAsBG,MAAAA,KAAK,EAAES,IAAI,CAACC,MAAL,KAAgB;AAA7C,KAAf;AACD,GAFU,EAET,IAFS,CAAX,CA3Ba,CA8Bb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEN,KAAK,CAACE,QAAN,GAAiBhB,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAeE,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from './Chart'\nimport { createStore } from 'redux'\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\nlet defaultState = {\n  chartValues:[]\n}\nconst MAX_CHART_VALS = 10\n\nfunction App() {\n\n  const [chartValues, updateChartValues] = useState([])\n  function reducer(state=defaultState, action) {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1\n      case 'DECREMENT':\n        return state - 1\n      case 'UPDATE_CHART':\n        console.log('UPDATE_CHART==>action.value:'+action.value)\n        let chartValues = state.chartValues\n        chartValues.push(action.value)\n        if(chartValues.length > MAX_CHART_VALS){\n          chartValues.shift()\n        }\n        return {...state,chartValues}\n      default:\n        return state\n    }\n  }\n  let store = createStore(reducer)\n  store.subscribe(() => {\n    let state = store.getState()\n    console.log('state:', state)\n    updateChartValues(state.chartValues)\n  })\n  setInterval(()=>{\n    store.dispatch({type:'UPDATE_CHART', value: Math.random() * 100})\n  },1000)\n  // The only way to mutate the internal state is to dispatch an action.\n  // The actions can be serialized, logged or stored and later replayed.\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 1\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 2\n  // store.dispatch({ type: 'DECREMENT' })\n  // 1\n  //console.log('counter:', counter)\n  return (\n    <div className=\"App\">\n      <Chart data={store.getState().chartValues} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}