{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/ThreeAnim1.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport './ThreeAnim1.css';\nimport * as THREE from \"three\";\nimport { makeStyles } from '@material-ui/core/styles';\nconst styles = makeStyles(theme => ({\n  poobar: {\n    marginTop: '20px'\n  }\n}));\n\nfunction ThreeAnim1(props) {\n  //let [svg, setSvg] = useState()\n  const threeContainer = useRef(null); //const data = [1,2,3,4,5,6,7,8,9]\n\n  useEffect(() => {\n    if (threeContainer && threeContainer.current) {\n      let scene = new THREE.Scene();\n      let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      let renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight); // document.body.appendChild( renderer.domElement );\n      // use ref as a mount point of the Three.js scene instead of the document.body\n\n      console.log('threeContainer:', threeContainer);\n      threeContainer.appendChild(renderer.domElement);\n      let geometry = new THREE.BoxGeometry(1, 1, 1);\n      let material = new THREE.MeshBasicMaterial({\n        color: 0x00ff00\n      });\n      let cube = new THREE.Mesh(geometry, material);\n      scene.add(cube);\n      camera.position.z = 5;\n\n      let animate = function () {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      };\n\n      animate();\n    }\n  }, [props.data, threeContainer]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'threeAnim1',\n    ref: threeContainer,\n    id: 'threeContainer1',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  });\n}\n\nexport default ThreeAnim1;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/ThreeAnim1.js"],"names":["React","useEffect","useRef","useState","THREE","makeStyles","styles","theme","poobar","marginTop","ThreeAnim1","props","threeContainer","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","console","log","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","data"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAO,kBAAP;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AAEA,MAAMC,MAAM,GAAGD,UAAU,CAAEE,KAAD,KAAU;AAClCC,EAAAA,MAAM,EAAC;AACLC,IAAAA,SAAS,EAAC;AADL;AAD2B,CAAV,CAAD,CAAzB;;AAMA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AACxB;AACA,QAAMC,cAAc,GAAGV,MAAM,CAAC,IAAD,CAA7B,CAFwB,CAGxB;;AACAD,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAGW,cAAc,IAAIA,cAAc,CAACC,OAApC,EAA4C;AAC1C,UAAIC,KAAK,GAAG,IAAIV,KAAK,CAACW,KAAV,EAAZ;AACA,UAAIC,MAAM,GAAG,IAAIZ,KAAK,CAACa,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,UAAIC,QAAQ,GAAG,IAAIjB,KAAK,CAACkB,aAAV,EAAf;AACAD,MAAAA,QAAQ,CAACE,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C,EAJ0C,CAK1C;AACA;;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bb,cAA/B;AACAA,MAAAA,cAAc,CAACc,WAAf,CAA4BL,QAAQ,CAACM,UAArC;AACA,UAAIC,QAAQ,GAAG,IAAIxB,KAAK,CAACyB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,UAAIC,QAAQ,GAAG,IAAI1B,KAAK,CAAC2B,iBAAV,CAA6B;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAA7B,CAAf;AACA,UAAIC,IAAI,GAAG,IAAI7B,KAAK,CAAC8B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAX;AACAhB,MAAAA,KAAK,CAACqB,GAAN,CAAWF,IAAX;AACAjB,MAAAA,MAAM,CAACoB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AACA,UAAIC,OAAO,GAAG,YAAY;AACxBC,QAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAL,QAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,QAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACArB,QAAAA,QAAQ,CAACsB,MAAT,CAAiB7B,KAAjB,EAAwBE,MAAxB;AACD,OALD;;AAMAsB,MAAAA,OAAO;AACR;AAGF,GAzBQ,EAyBP,CAAC3B,KAAK,CAACiC,IAAP,EAAahC,cAAb,CAzBO,CAAT;AA4BA,sBACI;AAAK,IAAA,SAAS,EAAE,YAAhB;AAA8B,IAAA,GAAG,EAAEA,cAAnC;AAAmD,IAAA,EAAE,EAAE,iBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKD;;AACD,eAAeF,UAAf","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './ThreeAnim1.css'\nimport * as THREE from \"three\";\nimport {makeStyles} from '@material-ui/core/styles'\n\nconst styles = makeStyles((theme)=>({\n  poobar:{\n    marginTop:'20px',\n  }\n}))\n\nfunction ThreeAnim1(props){\n  //let [svg, setSvg] = useState()\n  const threeContainer = useRef(null);\n  //const data = [1,2,3,4,5,6,7,8,9]\n  useEffect(()=>{\n    if(threeContainer && threeContainer.current){\n      let scene = new THREE.Scene();\n      let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n      let renderer = new THREE.WebGLRenderer();\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      // document.body.appendChild( renderer.domElement );\n      // use ref as a mount point of the Three.js scene instead of the document.body\n      console.log('threeContainer:', threeContainer)\n      threeContainer.appendChild( renderer.domElement );\n      let geometry = new THREE.BoxGeometry( 1, 1, 1 );\n      let material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n      let cube = new THREE.Mesh( geometry, material );\n      scene.add( cube );\n      camera.position.z = 5;\n      let animate = function () {\n        requestAnimationFrame( animate );\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render( scene, camera );\n      };\n      animate();\n    }\n\n\n  },[props.data, threeContainer])\n\n\n  return (\n      <div className={'threeAnim1'} ref={threeContainer} id={'threeContainer1'}>\n      </div>\n  )\n\n}\nexport default ThreeAnim1"]},"metadata":{},"sourceType":"module"}