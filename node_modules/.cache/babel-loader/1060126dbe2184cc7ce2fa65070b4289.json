{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/reactive_robot/src/Component1.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Component1.css';\nimport * as rr from './ReactiveRobot';\nimport * as ev from './Events';\n\nfunction Component1(props) {\n  const [currentValue, setCurrentValue] = useState(` inited at ${Date.now()}`);\n  const [useRedBackground, setUseRedBackground] = useState(false);\n  const [useRedOutline, setUseRedOutline] = useState(false); //const [name, setName] = useState('')\n  //console.log('Component1==>rendering==>name:', props.name)\n\n  useEffect(() => {\n    rr.addObserver(onEvent); //console.log(`${props.name} sending ${ev.COMPONENT_UPDATE_GET}`)\n\n    rr.next({\n      type: ev.COMPONENT_UPDATE_GET,\n      data: {\n        name: props.name\n      }\n    });\n    return () => {\n      rr.removeObserver(onEvent);\n    }; //cleanup on unmount\n  }, []);\n\n  function showRedBackground() {\n    setUseRedBackground(true);\n  }\n\n  function hideRedBackground() {\n    setUseRedBackground(false);\n    setUseRedOutline(true);\n  }\n\n  function onEvent(event) {\n    switch (event.type) {\n      case ev.COMPONENT1_TEST:\n        console.log('component1==>received COMPONENT1_TEST');\n        setCurrentValue(`${event.data.name} received at ${Date.now()}`);\n        break;\n\n      case ev.COMPONENT_UPDATE_RECEIVED:\n        //console.log('component1==>received COMPONENT_UPDATE_RECEIVED==>event.data.name:'+event.data.name)\n        if (event.data.name === props.name) {\n          //console.log('I got an event for me - I am '+props.name+', event.data.message:', event.data.message)\n          showRedBackground();\n          setTimeout(hideRedBackground, 500);\n          setCurrentValue(event.data.message);\n        }\n\n    }\n  }\n\n  let backgroundClass = 'Component1';\n\n  if (useRedBackground) {\n    backgroundClass = 'Component1JustUpdated';\n  } else if (useRedOutline) {\n    backgroundClass = 'Component1HasUpdated';\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: backgroundClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, props.name), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, currentValue));\n}\n\nexport default Component1;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/reactive_robot/src/Component1.js"],"names":["React","useState","useEffect","rr","ev","Component1","props","currentValue","setCurrentValue","Date","now","useRedBackground","setUseRedBackground","useRedOutline","setUseRedOutline","addObserver","onEvent","next","type","COMPONENT_UPDATE_GET","data","name","removeObserver","showRedBackground","hideRedBackground","event","COMPONENT1_TEST","console","log","COMPONENT_UPDATE_RECEIVED","setTimeout","message","backgroundClass"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,kBAAP;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAE,cAAaQ,IAAI,CAACC,GAAL,EAAW,EAA1B,CAAhD;AACA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,KAAD,CAAlD,CAHyB,CAIzB;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAI;AACZC,IAAAA,EAAE,CAACY,WAAH,CAAeC,OAAf,EADY,CAEZ;;AACAb,IAAAA,EAAE,CAACc,IAAH,CAAQ;AAACC,MAAAA,IAAI,EAACd,EAAE,CAACe,oBAAT;AAA8BC,MAAAA,IAAI,EAAC;AAACC,QAAAA,IAAI,EAACf,KAAK,CAACe;AAAZ;AAAnC,KAAR;AACA,WAAO,MAAI;AAAClB,MAAAA,EAAE,CAACmB,cAAH,CAAkBN,OAAlB;AAA2B,KAAvC,CAJY,CAI2B;AACxC,GALQ,EAKP,EALO,CAAT;;AAOA,WAASO,iBAAT,GAA4B;AAC1BX,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD;;AAED,WAASY,iBAAT,GAA4B;AAC1BZ,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAE,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;;AAED,WAASE,OAAT,CAAiBS,KAAjB,EAAuB;AACrB,YAAQA,KAAK,CAACP,IAAd;AAEE,WAAKd,EAAE,CAACsB,eAAR;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACApB,QAAAA,eAAe,CAAE,GAAEiB,KAAK,CAACL,IAAN,CAAWC,IAAK,gBAAeZ,IAAI,CAACC,GAAL,EAAW,EAA9C,CAAf;AACA;;AACF,WAAKN,EAAE,CAACyB,yBAAR;AACE;AACA,YAAGJ,KAAK,CAACL,IAAN,CAAWC,IAAX,KAAkBf,KAAK,CAACe,IAA3B,EAAgC;AAC9B;AACAE,UAAAA,iBAAiB;AACjBO,UAAAA,UAAU,CAACN,iBAAD,EAAmB,GAAnB,CAAV;AACAhB,UAAAA,eAAe,CAACiB,KAAK,CAACL,IAAN,CAAWW,OAAZ,CAAf;AACD;;AAbL;AAeD;;AACD,MAAIC,eAAe,GAAG,YAAtB;;AACA,MAAGrB,gBAAH,EAAoB;AAClBqB,IAAAA,eAAe,GAAG,uBAAlB;AACD,GAFD,MAEM,IAAGnB,aAAH,EAAiB;AACrBmB,IAAAA,eAAe,GAAG,sBAAlB;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAEA,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO1B,KAAK,CAACe,IAAb,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOd,YAAP,CAFF,CADF;AAMD;;AAED,eAAeF,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './Component1.css'\nimport * as rr from './ReactiveRobot'\nimport * as ev from './Events'\n\nfunction Component1(props) {\n  const [currentValue, setCurrentValue] = useState(` inited at ${Date.now()}`)\n  const [useRedBackground, setUseRedBackground] = useState(false)\n  const [useRedOutline, setUseRedOutline] = useState(false)\n  //const [name, setName] = useState('')\n  //console.log('Component1==>rendering==>name:', props.name)\n  useEffect(()=>{\n    rr.addObserver(onEvent)\n    //console.log(`${props.name} sending ${ev.COMPONENT_UPDATE_GET}`)\n    rr.next({type:ev.COMPONENT_UPDATE_GET,data:{name:props.name}})\n    return ()=>{rr.removeObserver(onEvent)}//cleanup on unmount\n  },[])\n\n  function showRedBackground(){\n    setUseRedBackground(true)\n  }\n\n  function hideRedBackground(){\n    setUseRedBackground(false)\n    setUseRedOutline(true)\n  }\n\n  function onEvent(event){\n    switch (event.type){\n\n      case ev.COMPONENT1_TEST:\n        console.log('component1==>received COMPONENT1_TEST')\n        setCurrentValue(`${event.data.name} received at ${Date.now()}`)\n        break;\n      case ev.COMPONENT_UPDATE_RECEIVED:\n        //console.log('component1==>received COMPONENT_UPDATE_RECEIVED==>event.data.name:'+event.data.name)\n        if(event.data.name===props.name){\n          //console.log('I got an event for me - I am '+props.name+', event.data.message:', event.data.message)\n          showRedBackground()\n          setTimeout(hideRedBackground,500)\n          setCurrentValue(event.data.message)\n        }\n    }\n  }\n  let backgroundClass = 'Component1'\n  if(useRedBackground){\n    backgroundClass = 'Component1JustUpdated'\n  }else if(useRedOutline){\n    backgroundClass = 'Component1HasUpdated'\n  }\n  return (\n    <div className={backgroundClass}>\n      <span>{props.name}</span>\n      <span>{currentValue}</span>\n    </div>\n  );\n}\n\nexport default Component1;\n"]},"metadata":{},"sourceType":"module"}