{"ast":null,"code":"import * as rr from './ReactiveRobot';\nimport * as ev from './Events';\nlet clients = [];\nlet updateDelta = 100;\nlet interval = null;\n\nfunction onEvent(event) {\n  switch (event.type) {\n    case ev.INITIALIZE_COMPONENTS:\n      console.log('DS got INITIALIZE_COMPONENTS==>event.data.updateDelta:' + event.data.updateDelta);\n      updateDelta = event.data.updateDelta;\n      getData();\n\n    case ev.COMPONENT_UPDATE_GET:\n      //getData(event.data.name)\n      console.log('DS got COMPONENT_UPDATE_GET==>event.data.name:' + event.data.name);\n      clients.push(event.data.name);\n  }\n}\n\nrr.addObserver(onEvent);\nexport function getData() {\n  //console.log('DataService==>getData()==>name:'+name)\n  //make some fake data, but this could easily be coming from an api call//\n  // let interval = setInterval(()=>{\n  //   let rand = Math.random()\n  //   if(rand < 0.33){\n  //     rr.next({type:ev.APP_TEST,data:{name:'hello App'}})\n  //   }else if(rand < 0.66){\n  //     rr.next({type:ev.COMPONENT1_TEST,data:{name:'hello Component1'}})\n  //   }else{\n  //     rr.next({type:ev.COMPONENT2_TEST,data:{name:'hello Component2'}})\n  //   }\n  //\n  // },1000)\n  // if(name){\n  //   clients.push(name)\n  // }\n  function sendUpdate() {\n    // clients.forEach((c)=>{\n    //   rr.next({type:ev.COMPONENT_UPDATE_RECEIVED,data:{name:c, message:'updated at '+Date.now()}})\n    // })\n    console.log('sendUpdate');\n\n    if (clients.length > 0) {\n      let index = Math.floor(Math.random() * clients.length);\n      let nameOfClientToUpdate = clients[index];\n      rr.next({\n        type: ev.COMPONENT_UPDATE_RECEIVED,\n        data: {\n          name: nameOfClientToUpdate,\n          message: 'updated at ' + Date.now()\n        }\n      });\n    }\n  } //if(!interval){\n\n\n  clearInterval(interval);\n  console.log('getData()==>setting interval, updateDelta:', updateDelta);\n  interval = setInterval(sendUpdate, updateDelta); //}\n}","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/reactive_robot/src/DataService.js"],"names":["rr","ev","clients","updateDelta","interval","onEvent","event","type","INITIALIZE_COMPONENTS","console","log","data","getData","COMPONENT_UPDATE_GET","name","push","addObserver","sendUpdate","length","index","Math","floor","random","nameOfClientToUpdate","next","COMPONENT_UPDATE_RECEIVED","message","Date","now","clearInterval","setInterval"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;AAEA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,WAAW,GAAG,GAAlB;AACA,IAAIC,QAAQ,GAAG,IAAf;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAuB;AACrB,UAAQA,KAAK,CAACC,IAAd;AACE,SAAKN,EAAE,CAACO,qBAAR;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,2DAAyDJ,KAAK,CAACK,IAAN,CAAWR,WAAhF;AACAA,MAAAA,WAAW,GAAGG,KAAK,CAACK,IAAN,CAAWR,WAAzB;AACAS,MAAAA,OAAO;;AACT,SAAKX,EAAE,CAACY,oBAAR;AACE;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,mDAAiDJ,KAAK,CAACK,IAAN,CAAWG,IAAxE;AACAZ,MAAAA,OAAO,CAACa,IAAR,CAAaT,KAAK,CAACK,IAAN,CAAWG,IAAxB;AARJ;AAUD;;AACDd,EAAE,CAACgB,WAAH,CAAeX,OAAf;AACA,OAAO,SAASO,OAAT,GAAkB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAASK,UAAT,GAAqB;AACnB;AACA;AACA;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,QAAGR,OAAO,CAACgB,MAAR,GAAiB,CAApB,EAAsB;AACpB,UAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcpB,OAAO,CAACgB,MAAjC,CAAZ;AACA,UAAIK,oBAAoB,GAAGrB,OAAO,CAACiB,KAAD,CAAlC;AACAnB,MAAAA,EAAE,CAACwB,IAAH,CAAQ;AAACjB,QAAAA,IAAI,EAACN,EAAE,CAACwB,yBAAT;AAAmCd,QAAAA,IAAI,EAAC;AAACG,UAAAA,IAAI,EAACS,oBAAN;AAA4BG,UAAAA,OAAO,EAAC,gBAAcC,IAAI,CAACC,GAAL;AAAlD;AAAxC,OAAR;AACD;AAEF,GA5BsB,CA6BvB;;;AACAC,EAAAA,aAAa,CAACzB,QAAD,CAAb;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DP,WAA1D;AACAC,EAAAA,QAAQ,GAAG0B,WAAW,CAACb,UAAD,EAAYd,WAAZ,CAAtB,CAhCuB,CAiCvB;AACD","sourcesContent":["import * as rr from './ReactiveRobot'\nimport * as ev from './Events'\n\nlet clients = []\nlet updateDelta = 100\nlet interval = null\nfunction onEvent(event){\n  switch (event.type){\n    case ev.INITIALIZE_COMPONENTS:\n      console.log('DS got INITIALIZE_COMPONENTS==>event.data.updateDelta:'+event.data.updateDelta)\n      updateDelta = event.data.updateDelta\n      getData()\n    case ev.COMPONENT_UPDATE_GET:\n      //getData(event.data.name)\n      console.log('DS got COMPONENT_UPDATE_GET==>event.data.name:'+event.data.name)\n      clients.push(event.data.name)\n  }\n}\nrr.addObserver(onEvent)\nexport function getData(){\n  //console.log('DataService==>getData()==>name:'+name)\n  //make some fake data, but this could easily be coming from an api call//\n  // let interval = setInterval(()=>{\n  //   let rand = Math.random()\n  //   if(rand < 0.33){\n  //     rr.next({type:ev.APP_TEST,data:{name:'hello App'}})\n  //   }else if(rand < 0.66){\n  //     rr.next({type:ev.COMPONENT1_TEST,data:{name:'hello Component1'}})\n  //   }else{\n  //     rr.next({type:ev.COMPONENT2_TEST,data:{name:'hello Component2'}})\n  //   }\n  //\n  // },1000)\n  // if(name){\n  //   clients.push(name)\n  // }\n  function sendUpdate(){\n    // clients.forEach((c)=>{\n    //   rr.next({type:ev.COMPONENT_UPDATE_RECEIVED,data:{name:c, message:'updated at '+Date.now()}})\n    // })\n    console.log('sendUpdate')\n    if(clients.length > 0){\n      let index = Math.floor(Math.random()*clients.length)\n      let nameOfClientToUpdate = clients[index]\n      rr.next({type:ev.COMPONENT_UPDATE_RECEIVED,data:{name:nameOfClientToUpdate, message:'updated at '+Date.now()}})\n    }\n\n  }\n  //if(!interval){\n  clearInterval(interval)\n  console.log('getData()==>setting interval, updateDelta:', updateDelta)\n  interval = setInterval(sendUpdate,updateDelta)\n  //}\n}"]},"metadata":{},"sourceType":"module"}