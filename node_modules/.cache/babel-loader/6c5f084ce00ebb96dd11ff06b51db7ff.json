{"ast":null,"code":"import * as rr from './ReactiveRobot';\nimport * as ev from './Events';\nlet clients = [];\nlet interval = null;\n\nfunction onEvent(event) {\n  switch (event.type) {\n    case ev.COMPONENT_UPDATE_GET:\n      getData(event.data.name);\n  }\n}\n\nrr.addObserver(onEvent);\nexport function getData(name) {\n  console.log('DataService==>getData()==>name:' + name); //make some fake data, but this could easily be coming from an api call//\n  // let interval = setInterval(()=>{\n  //   let rand = Math.random()\n  //   if(rand < 0.33){\n  //     rr.next({type:ev.APP_TEST,data:{name:'hello App'}})\n  //   }else if(rand < 0.66){\n  //     rr.next({type:ev.COMPONENT1_TEST,data:{name:'hello Component1'}})\n  //   }else{\n  //     rr.next({type:ev.COMPONENT2_TEST,data:{name:'hello Component2'}})\n  //   }\n  //\n  // },1000)\n\n  if (name) {\n    clients.push(name);\n  }\n\n  function sendUpdates() {\n    clients.forEach(c => {\n      rr.next({\n        type: ev.COMPONENT_UPDATE_RECEIVED,\n        data: {\n          name: c,\n          message: 'updated at ' + Date.now()\n        }\n      });\n    });\n  }\n\n  if (!interval) {\n    interval = setInterval(sendUpdates, 1000);\n  }\n}","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/reactive_robot/src/DataService.js"],"names":["rr","ev","clients","interval","onEvent","event","type","COMPONENT_UPDATE_GET","getData","data","name","addObserver","console","log","push","sendUpdates","forEach","c","next","COMPONENT_UPDATE_RECEIVED","message","Date","now","setInterval"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;AAEA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,QAAQ,GAAG,IAAf;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAuB;AACrB,UAAQA,KAAK,CAACC,IAAd;AACE,SAAKL,EAAE,CAACM,oBAAR;AACEC,MAAAA,OAAO,CAACH,KAAK,CAACI,IAAN,CAAWC,IAAZ,CAAP;AAFJ;AAID;;AACDV,EAAE,CAACW,WAAH,CAAeP,OAAf;AACA,OAAO,SAASI,OAAT,CAAiBE,IAAjB,EAAsB;AAC3BE,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAkCH,IAA9C,EAD2B,CAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAGA,IAAH,EAAQ;AACNR,IAAAA,OAAO,CAACY,IAAR,CAAaJ,IAAb;AACD;;AACD,WAASK,WAAT,GAAsB;AACpBb,IAAAA,OAAO,CAACc,OAAR,CAAiBC,CAAD,IAAK;AACnBjB,MAAAA,EAAE,CAACkB,IAAH,CAAQ;AAACZ,QAAAA,IAAI,EAACL,EAAE,CAACkB,yBAAT;AAAmCV,QAAAA,IAAI,EAAC;AAACC,UAAAA,IAAI,EAACO,CAAN;AAASG,UAAAA,OAAO,EAAC,gBAAcC,IAAI,CAACC,GAAL;AAA/B;AAAxC,OAAR;AACD,KAFD;AAGD;;AACD,MAAG,CAACnB,QAAJ,EAAa;AACXA,IAAAA,QAAQ,GAAGoB,WAAW,CAACR,WAAD,EAAa,IAAb,CAAtB;AACD;AACF","sourcesContent":["import * as rr from './ReactiveRobot'\nimport * as ev from './Events'\n\nlet clients = []\nlet interval = null\nfunction onEvent(event){\n  switch (event.type){\n    case ev.COMPONENT_UPDATE_GET:\n      getData(event.data.name)\n  }\n}\nrr.addObserver(onEvent)\nexport function getData(name){\n  console.log('DataService==>getData()==>name:'+name)\n  //make some fake data, but this could easily be coming from an api call//\n  // let interval = setInterval(()=>{\n  //   let rand = Math.random()\n  //   if(rand < 0.33){\n  //     rr.next({type:ev.APP_TEST,data:{name:'hello App'}})\n  //   }else if(rand < 0.66){\n  //     rr.next({type:ev.COMPONENT1_TEST,data:{name:'hello Component1'}})\n  //   }else{\n  //     rr.next({type:ev.COMPONENT2_TEST,data:{name:'hello Component2'}})\n  //   }\n  //\n  // },1000)\n  if(name){\n    clients.push(name)\n  }\n  function sendUpdates(){\n    clients.forEach((c)=>{\n      rr.next({type:ev.COMPONENT_UPDATE_RECEIVED,data:{name:c, message:'updated at '+Date.now()}})\n    })\n  }\n  if(!interval){\n    interval = setInterval(sendUpdates,1000)\n  }\n}"]},"metadata":{},"sourceType":"module"}