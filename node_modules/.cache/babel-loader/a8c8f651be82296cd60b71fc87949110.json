{"ast":null,"code":"function find_max_sum(arr) {\n  let currentItem = 0;\n  let lastItem = 0;\n  let secondLastItem = 0;\n  let sum = 0;\n  arr.forEach((item, index) => {\n    let addedLastItem = false;\n    let deletedLastItem = false;\n    console.log('start item:' + item + ', lastItem:' + lastItem + ', secondLastItem:' + secondLastItem + ', sum:' + sum);\n\n    if (index === 0) {\n      sum += item;\n      addedLastItem = true;\n      lastItem = item;\n    } else if (item > lastItem) {\n      //currentItem = item;\n      //console.log('item>lastItem==>start==>sum:'+ sum)\n      sum -= lastItem; //if(secondLastItem > lastItem){\n\n      sum += secondLastItem; //}\n\n      sum += item;\n      addedLastItem = true;\n      secondLastItem = lastItem;\n      lastItem = item;\n      deletedLastItem = true; //console.log('item>lastItem==>done==>sum:'+ sum)\n    } else if (item === lastItem || item < lastItem) {\n      //console.log('item===lastItem==>start==>deletedLastItem:'+deletedLastItem+', sum:'+ sum)\n      if (deletedLastItem) {\n        sum += secondLastItem;\n      }\n\n      secondLastItem = lastItem;\n      lastItem = item; //console.log('item===lastItem==>done==>sum:'+ sum)\n    }\n\n    console.log('done item:' + item + ', lastItem:' + lastItem + ', secondLastItem:' + secondLastItem + ', sum:' + sum);\n  });\n  console.log(sum);\n}\n\nfunction find_max_sum2(arr) {\n  let items = [];\n  let finalItems = [];\n  let sum = 0; //make an array of objects with both value and index\n\n  arr.forEach((item, index) => {\n    items.push({\n      value: item,\n      index\n    });\n  }); //sort them by value\n\n  items.sort((a, b) => {\n    if (a.value < b.value) {\n      return 1;\n    } else if (a.value > b.value) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }); //start with the highest values, push everything that is not at an adjacent index to something already there into finalItems\n\n  items.forEach(item => {\n    let okToPush = !finalItems.find(it => {\n      if (it.index === item.index - 1 || it.index === item.index + 1) {\n        return true;\n      }\n    });\n\n    if (okToPush) {\n      finalItems.push(item);\n    }\n  }); //add up the values in finalItems, that will be the highest possible sum available from the array\n\n  finalItems.forEach(final => {\n    sum += final.value;\n  });\n  console.log('sum:', sum);\n}\n\nexport default find_max_sum2; //find_max_sum2([1,2,3,4])//6\n//find_max_sum2([1,2,3,4,1,2,3,4])//12\n//find_max_sum2([1,5,10,100,10,5])//110\n//find_max_sum2([1,20,30,5,10,100,101,102,90,10,5])//243","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/ChangeHealthcare2.js"],"names":["find_max_sum","arr","currentItem","lastItem","secondLastItem","sum","forEach","item","index","addedLastItem","deletedLastItem","console","log","find_max_sum2","items","finalItems","push","value","sort","a","b","okToPush","find","it","final"],"mappings":"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","sourcesContent":["function find_max_sum(arr){\n  let currentItem = 0\n  let lastItem = 0\n  let secondLastItem = 0\n  let sum = 0\n  arr.forEach((item, index)=>{\n    let addedLastItem = false\n    let deletedLastItem = false\n    console.log('start item:'+item+', lastItem:'+lastItem+', secondLastItem:'+secondLastItem+', sum:'+ sum)\n    if(index===0){\n\n      sum += item\n      addedLastItem = true\n      lastItem = item\n    }else if(item > lastItem){\n      //currentItem = item;\n      //console.log('item>lastItem==>start==>sum:'+ sum)\n      sum -= lastItem\n      //if(secondLastItem > lastItem){\n      sum += secondLastItem\n      //}\n\n      sum += item\n      addedLastItem = true\n      secondLastItem = lastItem\n      lastItem = item\n      deletedLastItem = true;\n      //console.log('item>lastItem==>done==>sum:'+ sum)\n\n    }else if(item===lastItem || item < lastItem){\n      //console.log('item===lastItem==>start==>deletedLastItem:'+deletedLastItem+', sum:'+ sum)\n      if(deletedLastItem){\n        sum+=secondLastItem\n      }\n      secondLastItem = lastItem\n      lastItem = item\n      //console.log('item===lastItem==>done==>sum:'+ sum)\n    }\n    console.log('done item:'+item+', lastItem:'+lastItem+', secondLastItem:'+secondLastItem+', sum:'+ sum)\n  })\n  console.log(sum)\n}\n\nfunction find_max_sum2(arr){\n  let items = [];\n  let finalItems = []\n  let sum=0\n\n  //make an array of objects with both value and index\n  arr.forEach((item, index)=>{\n    items.push({value:item,index})\n  })\n  //sort them by value\n  items.sort((a,b)=>{\n    if(a.value < b.value){\n      return 1\n    }else if(a.value > b.value){\n      return -1\n    }else{\n      return 0\n    }\n  })\n  //start with the highest values, push everything that is not at an adjacent index to something already there into finalItems\n  items.forEach((item)=>{\n    let okToPush = !finalItems.find((it)=>{\n      if(it.index===item.index-1 || it.index===item.index+1){\n        return true\n      }\n    })\n    if(okToPush){\n      finalItems.push(item)\n    }\n  })\n  //add up the values in finalItems, that will be the highest possible sum available from the array\n  finalItems.forEach((final)=>{\n    sum += final.value\n  })\n  console.log('sum:', sum)\n}\nexport default find_max_sum2\n//find_max_sum2([1,2,3,4])//6\n//find_max_sum2([1,2,3,4,1,2,3,4])//12\n//find_max_sum2([1,5,10,100,10,5])//110\n//find_max_sum2([1,20,30,5,10,100,101,102,90,10,5])//243"]},"metadata":{},"sourceType":"module"}