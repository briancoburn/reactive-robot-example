{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/ThreeAnim1.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport './ThreeAnim1.css';\nimport * as THREE from \"three\";\nimport { makeStyles } from '@material-ui/core/styles';\nconst styles = makeStyles(theme => ({\n  poobar: {\n    marginTop: '20px'\n  }\n}));\nconst radius = 2.5;\n\nfunction ThreeAnim1(props) {\n  //let [svg, setSvg] = useState()\n  const threeContainer = useRef(null); //const data = [1,2,3,4,5,6,7,8,9]\n\n  useEffect(() => {\n    if (threeContainer && threeContainer.current) {\n      let scene = new THREE.Scene();\n      let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      let renderer = new THREE.WebGLRenderer(); //renderer.setSize( window.innerWidth, window.innerHeight );\n\n      renderer.setSize(200, 200); // document.body.appendChild( renderer.domElement );\n      // use ref as a mount point of the Three.js scene instead of the document.body\n\n      console.log('threeContainer:', threeContainer);\n      threeContainer.current.appendChild(renderer.domElement);\n      let geometry = new THREE.BoxGeometry(1, 1, 1); // let material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n      // let cube = new THREE.Mesh( geometry, material );\n      //let geometry = new THREE.CubeGeometry(200, 200, 200);\n      // Set random colours for each of the 6 faces :)\n\n      let color1 = Math.random() * 0xffffff;\n      let color2 = Math.random() * 0xffffff;\n      let color3 = Math.random() * 0xffffff;\n      let color4 = Math.random() * 0xffffff;\n      let color5 = Math.random() * 0xffffff;\n      let color6 = Math.random() * 0xffffff;\n      geometry.faces[0].color.setHex(color1);\n      geometry.faces[1].color.setHex(color1);\n      geometry.faces[2].color.setHex(color2);\n      geometry.faces[3].color.setHex(color2);\n      geometry.faces[4].color.setHex(color3);\n      geometry.faces[5].color.setHex(color3);\n      geometry.faces[6].color.setHex(color4);\n      geometry.faces[7].color.setHex(color4);\n      geometry.faces[8].color.setHex(color5);\n      geometry.faces[9].color.setHex(color5);\n      geometry.faces[10].color.setHex(color6);\n      geometry.faces[11].color.setHex(color6);\n      let material = new THREE.MeshBasicMaterial({\n        vertexColors: THREE.FaceColors\n      });\n      let numCubes = 12;\n      let angleDegIncrement = 360 / numCubes;\n      let cubes = [];\n\n      function degToRad(deg) {\n        return deg * Math.PI / 180;\n      }\n\n      function dradToDeg(rad) {\n        return rad * 180 / Math.PI;\n      }\n\n      for (let i = 0; i < numCubes; i += 1) {\n        let mesh = new THREE.Mesh(geometry, material);\n        let cube = {\n          angleRad: degToRad(i * angleDegIncrement),\n          mesh: mesh\n        };\n        cube.mesh.position.x = Math.sin(cube.angleRad) * radius;\n        cube.mesh.position.y = Math.cos(cube.angleRad) * radius;\n        cubes.push(cube);\n      }\n\n      let cube = new THREE.Mesh(geometry, material); //scene.add( cube );\n      //scene.add( cube );\n\n      cubes.forEach(cube => {\n        scene.add(cube.mesh);\n      });\n      camera.position.z = 5;\n      let angle = 0;\n\n      let animate = function () {\n        requestAnimationFrame(animate);\n        cubes.forEach(cube => {\n          cube.mesh.rotation.x += 0.01;\n          cube.mesh.rotation.y += 0.01;\n          cube.mesh.position.x = Math.sin(cube.angleRad) * radius;\n          cube.mesh.position.y = Math.cos(cube.angleRad) * radius;\n          cube.angleRad += 0.01;\n        }); // cube.rotation.x += 0.01;\n        // cube.rotation.y += 0.01;\n        // cube.position.x = Math.sin(angle) * radius\n        // cube.position.y = Math.cos(angle) * radius\n        // angle += 0.01\n\n        renderer.render(scene, camera);\n      };\n\n      animate();\n    }\n  }, [props.data, threeContainer]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'threeAnim1',\n    ref: threeContainer,\n    id: 'threeContainer1',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  });\n}\n\nexport default ThreeAnim1;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/ThreeAnim1.js"],"names":["React","useEffect","useRef","useState","THREE","makeStyles","styles","theme","poobar","marginTop","radius","ThreeAnim1","props","threeContainer","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","console","log","appendChild","domElement","geometry","BoxGeometry","color1","Math","random","color2","color3","color4","color5","color6","faces","color","setHex","material","MeshBasicMaterial","vertexColors","FaceColors","numCubes","angleDegIncrement","cubes","degToRad","deg","PI","dradToDeg","rad","i","mesh","Mesh","cube","angleRad","position","x","sin","y","cos","push","forEach","add","z","angle","animate","requestAnimationFrame","rotation","render","data"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './ThreeAnim1.css'\nimport * as THREE from \"three\";\nimport {makeStyles} from '@material-ui/core/styles'\n\nconst styles = makeStyles((theme)=>({\n  poobar:{\n    marginTop:'20px',\n  }\n}))\nconst radius = 2.5;\n\nfunction ThreeAnim1(props){\n  //let [svg, setSvg] = useState()\n  const threeContainer = useRef(null);\n  //const data = [1,2,3,4,5,6,7,8,9]\n  useEffect(()=>{\n    if(threeContainer && threeContainer.current){\n      let scene = new THREE.Scene();\n      let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n      let renderer = new THREE.WebGLRenderer();\n      //renderer.setSize( window.innerWidth, window.innerHeight );\n      renderer.setSize( 200, 200 );\n      // document.body.appendChild( renderer.domElement );\n      // use ref as a mount point of the Three.js scene instead of the document.body\n      console.log('threeContainer:', threeContainer)\n      threeContainer.current.appendChild( renderer.domElement );\n      let geometry = new THREE.BoxGeometry( 1, 1, 1 );\n      // let material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n      // let cube = new THREE.Mesh( geometry, material );\n\n\n      //let geometry = new THREE.CubeGeometry(200, 200, 200);\n\n      // Set random colours for each of the 6 faces :)\n      let color1 = Math.random() * 0xffffff\n      let color2 = Math.random() * 0xffffff\n      let color3 = Math.random() * 0xffffff\n      let color4 = Math.random() * 0xffffff\n      let color5 = Math.random() * 0xffffff\n      let color6 = Math.random() * 0xffffff\n\n\n      geometry.faces[ 0 ].color.setHex( color1 );\n      geometry.faces[ 1 ].color.setHex( color1 );\n      geometry.faces[ 2 ].color.setHex( color2 );\n      geometry.faces[ 3 ].color.setHex( color2 );\n      geometry.faces[ 4 ].color.setHex( color3 );\n      geometry.faces[ 5 ].color.setHex( color3 );\n      geometry.faces[ 6 ].color.setHex( color4 );\n      geometry.faces[ 7 ].color.setHex( color4 );\n      geometry.faces[ 8 ].color.setHex( color5 );\n      geometry.faces[ 9 ].color.setHex( color5 );\n      geometry.faces[ 10 ].color.setHex( color6 );\n      geometry.faces[ 11 ].color.setHex( color6 );\n\n      let material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors } );\n      let numCubes = 12\n      let angleDegIncrement = 360/numCubes\n\n      let cubes = [];\n\n      function degToRad(deg){\n        return deg * Math.PI / 180\n      }\n      function dradToDeg(rad){\n        return rad * 180 / Math.PI\n      }\n\n      for(let i=0;i<numCubes;i+=1){\n        let mesh = new THREE.Mesh(geometry, material)\n        let cube = {angleRad:degToRad(i*angleDegIncrement), mesh:mesh}\n        cube.mesh.position.x = Math.sin(cube.angleRad) * radius\n        cube.mesh.position.y = Math.cos(cube.angleRad) * radius\n        cubes.push(cube)\n      }\n      let cube = new THREE.Mesh(geometry, material);\n      //scene.add( cube );\n      //scene.add( cube );\n      cubes.forEach((cube)=>{\n        scene.add(cube.mesh)\n      })\n\n      camera.position.z = 5;\n\n\n\n\n      let angle=0;\n\n\n\n      let animate = function () {\n        requestAnimationFrame( animate );\n        cubes.forEach((cube)=>{\n          cube.mesh.rotation.x += 0.01;\n          cube.mesh.rotation.y += 0.01;\n          cube.mesh.position.x = Math.sin(cube.angleRad) * radius\n          cube.mesh.position.y = Math.cos(cube.angleRad) * radius\n          cube.angleRad += 0.01\n        })\n        // cube.rotation.x += 0.01;\n        // cube.rotation.y += 0.01;\n        // cube.position.x = Math.sin(angle) * radius\n        // cube.position.y = Math.cos(angle) * radius\n        // angle += 0.01\n        renderer.render( scene, camera );\n      };\n      animate();\n    }\n\n\n  },[props.data, threeContainer])\n\n\n  return (\n      <div className={'threeAnim1'} ref={threeContainer} id={'threeContainer1'}>\n      </div>\n  )\n\n}\nexport default ThreeAnim1"]},"metadata":{},"sourceType":"module"}