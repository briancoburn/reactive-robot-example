{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/reactive_robot/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport * as ds from \"./DataService\";\nimport * as rr from './ReactiveRobot';\nimport * as ev from './Events';\nimport Component1 from \"./Component1\";\nimport Component2 from \"./Component2\";\n\nfunction App() {\n  const [hasRequestedData, setHasRequestedData] = useState(false); //if you're mounting/unmounting components, you can cache their data here\n  //do not put this in state, or you will rerender everything when it changes\n\n  let globalData = {\n    component1LatestValue: '',\n    component2LatestValue: ''\n  };\n  console.log('App==>rendering:');\n  useEffect(() => {\n    rr.addObserver(onEvent);\n  }, []);\n\n  function onEvent(event) {\n    switch (event.type) {\n      case ev.APP_TEST:\n        console.log('App==>got TEST_APP event');\n    }\n  }\n\n  function getData() {\n    console.log('App==>getData()');\n    ds.getData();\n    setHasRequestedData(true);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Reactive Robot\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"State management framework\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"ReactiveRobot is a lean and mean react state management framework that promotes a high level of decoupling, granular control of rendering, and components that react to events. It is intended to be a simple and highly performant alternative to popular state management systems such as Redux, mobx, useContext, etc.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"You can examine the ReactiveRobot object yourself. It is quite simple. It has a list of observers, methods to add and remove them, and a trigger method, which will call the registered observer functions with any event that comes thru. There are not strict requirements for how to use ReactiveRobot, but this example shows you some easy ways to get going. I'll call it best practices until I come up with or am made aware of better ones.\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"What Do We Have Here?\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"This application was made with create-react-app. You might want to do that too. Aside from the files that are generated by create-react-app, these have been added to create a demonstration of how to use ReactiveRobot:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"ReactiveRobot\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Events     \"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"DataService\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Component1\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Component2\")), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: hasRequestedData,\n    onClick: () => {\n      getData();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"GET DATA\"), /*#__PURE__*/React.createElement(Component1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Component2, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/reactive_robot/src/App.js"],"names":["React","useState","useEffect","ds","rr","ev","Component1","Component2","App","hasRequestedData","setHasRequestedData","globalData","component1LatestValue","component2LatestValue","console","log","addObserver","onEvent","event","type","APP_TEST","getData"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CT,QAAQ,CAAC,KAAD,CAAxD,CADa,CAEb;AACA;;AACA,MAAIU,UAAU,GAAG;AACfC,IAAAA,qBAAqB,EAAC,EADP;AAEfC,IAAAA,qBAAqB,EAAC;AAFP,GAAjB;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEAb,EAAAA,SAAS,CAAC,MAAI;AACZE,IAAAA,EAAE,CAACY,WAAH,CAAeC,OAAf;AACD,GAFQ,EAEP,EAFO,CAAT;;AAIA,WAASA,OAAT,CAAiBC,KAAjB,EAAuB;AACrB,YAAQA,KAAK,CAACC,IAAd;AACE,WAAKd,EAAE,CAACe,QAAR;AACEN,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAFJ;AAID;;AACD,WAASM,OAAT,GAAkB;AAChBP,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAZ,IAAAA,EAAE,CAACkB,OAAH;AACAX,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iUAHF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4bARF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAdF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iOAfF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,CAnBF,eA2BE;AAAQ,IAAA,QAAQ,EAAED,gBAAlB;AAAoC,IAAA,OAAO,EAAE,MAAI;AAACY,MAAAA,OAAO;AAAG,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3BF,eA4BE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BF,eA6BE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7BF,CADF;AAiCD;;AAED,eAAeb,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './App.css'\nimport * as ds from \"./DataService\"\nimport * as rr from './ReactiveRobot'\nimport * as ev from './Events'\nimport Component1 from \"./Component1\"\nimport Component2 from \"./Component2\"\n\nfunction App() {\n  const [hasRequestedData, setHasRequestedData] = useState(false)\n  //if you're mounting/unmounting components, you can cache their data here\n  //do not put this in state, or you will rerender everything when it changes\n  let globalData = {\n    component1LatestValue:'',\n    component2LatestValue:'',\n  }\n\n  console.log('App==>rendering:')\n\n  useEffect(()=>{\n    rr.addObserver(onEvent)\n  },[])\n\n  function onEvent(event){\n    switch (event.type){\n      case ev.APP_TEST:\n        console.log('App==>got TEST_APP event')\n    }\n  }\n  function getData(){\n    console.log('App==>getData()')\n    ds.getData()\n    setHasRequestedData(true)\n  }\n\n  return (\n    <div className=\"App\">\n      <h4>Reactive Robot</h4>\n      <h5>State management framework</h5>\n      <p>\n        ReactiveRobot is a lean and mean react state management framework that promotes a high level of decoupling,\n        granular control of rendering, and components that react to events. It is intended to be a simple and highly\n        performant alternative to popular state management systems such as Redux, mobx, useContext, etc.\n      </p>\n      <p>\n        You can examine the ReactiveRobot object yourself. It is quite simple. It has a list of observers, methods to\n        add and remove them, and a trigger method, which will call the registered observer functions with any event that\n        comes thru. There are not strict requirements for how to use ReactiveRobot, but this example shows you some easy\n        ways to get going. I'll call it best practices until I come up with or am made aware of better ones.\n      </p>\n      <h5>What Do We Have Here?</h5>\n      <p>\n        This application was made with create-react-app. You might want to do that too. Aside from the files that are generated\n        by create-react-app, these have been added to create a demonstration of how to use ReactiveRobot:\n      </p>\n      <ul>\n        <li>ReactiveRobot</li>\n        <li>Events     </li>\n        <li>DataService</li>\n        <li>Component1</li>\n        <li>Component2</li>\n      </ul>\n\n      <button disabled={hasRequestedData} onClick={()=>{getData()}}>GET DATA</button>\n      <Component1/>\n      <Component2/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}