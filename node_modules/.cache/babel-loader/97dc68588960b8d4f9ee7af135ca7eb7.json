{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/App.js\";\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { createStore } from 'redux';\nimport { Line, Doughnut } from \"react-chartjs-2\";\n\nvar Chart = require('chart.js');\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\n\nlet defaultState = {\n  chartValues: []\n};\nconst MAX_CHART_VALS = 10;\n\nfunction App() {\n  const [chartValues, updateChartValues] = useState([]);\n\n  function reducer(state = defaultState, action) {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1;\n\n      case 'DECREMENT':\n        return state - 1;\n\n      case 'UPDATE_CHART':\n        //console.log('UPDATE_CHART==>action.value:'+action.value)\n        let chartValues = state.chartValues;\n        chartValues.push(action.value);\n\n        if (chartValues.length > MAX_CHART_VALS) {\n          chartValues.shift();\n        }\n\n        return { ...state,\n          chartValues\n        };\n\n      default:\n        return state;\n    }\n  }\n\n  let store = createStore(reducer);\n  store.subscribe(() => {\n    let state = store.getState(); //console.log('state:', state)\n\n    updateChartValues(state.chartValues);\n  });\n  setInterval(() => {\n    store.dispatch({\n      type: 'UPDATE_CHART',\n      value: Math.random() * 100\n    });\n  }, 1000); // The only way to mutate the internal state is to dispatch an action.\n  // The actions can be serialized, logged or stored and later replayed.\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 1\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 2\n  // store.dispatch({ type: 'DECREMENT' })\n  // 1\n\n  console.log('chartValues:', chartValues);\n  let data = {\n    labels: ['a', 'b', 'c', 'd'],\n    dataSets: [{\n      type: 'line',\n      backgroundColor: \"rgba(142, 243, 197, 0.5)\",\n      pointBackgroundColor: \"#fff\",\n      pointHoverBackgroundColor: '#fff',\n      pointStyle: \"circle\",\n      label: \"Monthly Expenses\",\n      borderColor: \"#2be1d8\",\n      borderWidth: 3,\n      borderJoinStyle: \"round\",\n      lineTension: 0.3,\n      fontColor: \"#fff\",\n      hitRadius: 5,\n      hoverRadius: 8,\n      radius: 4,\n      data: chartValues\n    }]\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data || {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/App.js"],"names":["React","useState","createStore","Line","Doughnut","Chart","require","defaultState","chartValues","MAX_CHART_VALS","App","updateChartValues","reducer","state","action","type","push","value","length","shift","store","subscribe","getState","setInterval","dispatch","Math","random","console","log","data","labels","dataSets","backgroundColor","pointBackgroundColor","pointHoverBackgroundColor","pointStyle","label","borderColor","borderWidth","borderJoinStyle","lineTension","fontColor","hitRadius","hoverRadius","radius"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { createStore } from 'redux'\nimport {Line, Doughnut} from \"react-chartjs-2\";\nvar Chart = require('chart.js');\n\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\nlet defaultState = {\n  chartValues:[]\n}\nconst MAX_CHART_VALS = 10\n\nfunction App() {\n\n  const [chartValues, updateChartValues] = useState([])\n  function reducer(state=defaultState, action) {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1\n      case 'DECREMENT':\n        return state - 1\n      case 'UPDATE_CHART':\n        //console.log('UPDATE_CHART==>action.value:'+action.value)\n        let chartValues = state.chartValues\n        chartValues.push(action.value)\n        if(chartValues.length > MAX_CHART_VALS){\n          chartValues.shift()\n        }\n        return {...state,chartValues}\n      default:\n        return state\n    }\n  }\n  let store = createStore(reducer)\n  store.subscribe(() => {\n    let state = store.getState()\n    //console.log('state:', state)\n    updateChartValues(state.chartValues)\n  })\n  setInterval(()=>{\n    store.dispatch({type:'UPDATE_CHART', value: Math.random() * 100})\n  },1000)\n  // The only way to mutate the internal state is to dispatch an action.\n  // The actions can be serialized, logged or stored and later replayed.\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 1\n  // store.dispatch({ type: 'INCREMENT' })\n  // // 2\n  // store.dispatch({ type: 'DECREMENT' })\n  // 1\n  console.log('chartValues:', chartValues)\n  let data =\n    {\n      labels:['a','b','c','d'],\n      dataSets:[{\n        type:'line',\n        backgroundColor: \"rgba(142, 243, 197, 0.5)\",\n        pointBackgroundColor: \"#fff\",\n        pointHoverBackgroundColor: '#fff',\n        pointStyle: \"circle\",\n        label: \"Monthly Expenses\",\n        borderColor: \"#2be1d8\",\n        borderWidth: 3,\n        borderJoinStyle: \"round\",\n        lineTension: 0.3,\n        fontColor: \"#fff\",\n        hitRadius: 5,\n        hoverRadius: 8,\n        radius: 4,\n        data: chartValues\n      }]\n    }\n  return (\n    <div className=\"App\">\n      <Line data={data || {}} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}