{"ast":null,"code":"import * as rr from './ReactiveRobot';\nimport * as ev from './Events';\nlet clients = [];\nlet updateDelta = 1000;\nlet interval = null;\n\nfunction onEvent(event) {\n  switch (event.type) {\n    case ev.COMPONENT_UPDATE_GET:\n      getData(event.data.name);\n  }\n}\n\nrr.addObserver(onEvent);\nexport function getData(name) {\n  console.log('DataService==>getData()==>name:' + name); //make some fake data, but this could easily be coming from an api call//\n  // let interval = setInterval(()=>{\n  //   let rand = Math.random()\n  //   if(rand < 0.33){\n  //     rr.next({type:ev.APP_TEST,data:{name:'hello App'}})\n  //   }else if(rand < 0.66){\n  //     rr.next({type:ev.COMPONENT1_TEST,data:{name:'hello Component1'}})\n  //   }else{\n  //     rr.next({type:ev.COMPONENT2_TEST,data:{name:'hello Component2'}})\n  //   }\n  //\n  // },1000)\n\n  if (name) {\n    clients.push(name);\n  }\n\n  function sendUpdate() {\n    // clients.forEach((c)=>{\n    //   rr.next({type:ev.COMPONENT_UPDATE_RECEIVED,data:{name:c, message:'updated at '+Date.now()}})\n    // })\n    let index = Math.floor(Math.random() * clients.length);\n    let nameOfClientToUpdate = clients[index];\n    rr.next({\n      type: ev.COMPONENT_UPDATE_RECEIVED,\n      data: {\n        name: nameOfClientToUpdate,\n        message: 'updated at ' + Date.now()\n      }\n    });\n  }\n\n  if (!interval) {\n    interval = setInterval(sendUpdate, updateDelta);\n  }\n}","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/reactive_robot/src/DataService.js"],"names":["rr","ev","clients","updateDelta","interval","onEvent","event","type","COMPONENT_UPDATE_GET","getData","data","name","addObserver","console","log","push","sendUpdate","index","Math","floor","random","length","nameOfClientToUpdate","next","COMPONENT_UPDATE_RECEIVED","message","Date","now","setInterval"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;AAEA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAIC,QAAQ,GAAG,IAAf;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAuB;AACrB,UAAQA,KAAK,CAACC,IAAd;AACE,SAAKN,EAAE,CAACO,oBAAR;AACEC,MAAAA,OAAO,CAACH,KAAK,CAACI,IAAN,CAAWC,IAAZ,CAAP;AAFJ;AAID;;AACDX,EAAE,CAACY,WAAH,CAAeP,OAAf;AACA,OAAO,SAASI,OAAT,CAAiBE,IAAjB,EAAsB;AAC3BE,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAkCH,IAA9C,EAD2B,CAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAGA,IAAH,EAAQ;AACNT,IAAAA,OAAO,CAACa,IAAR,CAAaJ,IAAb;AACD;;AACD,WAASK,UAAT,GAAqB;AACnB;AACA;AACA;AACA,QAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAclB,OAAO,CAACmB,MAAjC,CAAZ;AACA,QAAIC,oBAAoB,GAAGpB,OAAO,CAACe,KAAD,CAAlC;AACAjB,IAAAA,EAAE,CAACuB,IAAH,CAAQ;AAAChB,MAAAA,IAAI,EAACN,EAAE,CAACuB,yBAAT;AAAmCd,MAAAA,IAAI,EAAC;AAACC,QAAAA,IAAI,EAACW,oBAAN;AAA4BG,QAAAA,OAAO,EAAC,gBAAcC,IAAI,CAACC,GAAL;AAAlD;AAAxC,KAAR;AACD;;AACD,MAAG,CAACvB,QAAJ,EAAa;AACXA,IAAAA,QAAQ,GAAGwB,WAAW,CAACZ,UAAD,EAAYb,WAAZ,CAAtB;AACD;AACF","sourcesContent":["import * as rr from './ReactiveRobot'\nimport * as ev from './Events'\n\nlet clients = []\nlet updateDelta = 1000\nlet interval = null\nfunction onEvent(event){\n  switch (event.type){\n    case ev.COMPONENT_UPDATE_GET:\n      getData(event.data.name)\n  }\n}\nrr.addObserver(onEvent)\nexport function getData(name){\n  console.log('DataService==>getData()==>name:'+name)\n  //make some fake data, but this could easily be coming from an api call//\n  // let interval = setInterval(()=>{\n  //   let rand = Math.random()\n  //   if(rand < 0.33){\n  //     rr.next({type:ev.APP_TEST,data:{name:'hello App'}})\n  //   }else if(rand < 0.66){\n  //     rr.next({type:ev.COMPONENT1_TEST,data:{name:'hello Component1'}})\n  //   }else{\n  //     rr.next({type:ev.COMPONENT2_TEST,data:{name:'hello Component2'}})\n  //   }\n  //\n  // },1000)\n  if(name){\n    clients.push(name)\n  }\n  function sendUpdate(){\n    // clients.forEach((c)=>{\n    //   rr.next({type:ev.COMPONENT_UPDATE_RECEIVED,data:{name:c, message:'updated at '+Date.now()}})\n    // })\n    let index = Math.floor(Math.random()*clients.length)\n    let nameOfClientToUpdate = clients[index]\n    rr.next({type:ev.COMPONENT_UPDATE_RECEIVED,data:{name:nameOfClientToUpdate, message:'updated at '+Date.now()}})\n  }\n  if(!interval){\n    interval = setInterval(sendUpdate,updateDelta)\n  }\n}"]},"metadata":{},"sourceType":"module"}