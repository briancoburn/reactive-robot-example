{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Chart from './Chart';\nimport { createStore } from 'redux';\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\nlet defaultState = {\n  chartValues: []\n};\n\nfunction App() {\n  function reducer(state = defaultState, action) {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1;\n\n      case 'DECREMENT':\n        return state - 1;\n\n      default:\n        return state;\n    }\n  }\n\n  let store = createStore(reducer);\n  store.subscribe(() => {\n    console.log(store.getState());\n  }); // The only way to mutate the internal state is to dispatch an action.\n  // The actions can be serialized, logged or stored and later replayed.\n\n  store.dispatch({\n    type: 'INCREMENT'\n  }); // 1\n\n  store.dispatch({\n    type: 'INCREMENT'\n  }); // 2\n\n  store.dispatch({\n    type: 'DECREMENT'\n  }); // 1\n  //console.log('counter:', counter)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Chart, {\n    data: [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/App.js"],"names":["React","Chart","createStore","defaultState","chartValues","App","reducer","state","action","type","store","subscribe","console","log","getState","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAC;AADK,CAAnB;;AAIA,SAASC,GAAT,GAAe;AACb,WAASC,OAAT,CAAiBC,KAAK,GAACJ,YAAvB,EAAqCK,MAArC,EAA6C;AAC3C,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,WAAL;AACE,eAAOF,KAAK,GAAG,CAAf;;AACF,WAAK,WAAL;AACE,eAAOA,KAAK,GAAG,CAAf;;AACF;AACE,eAAOA,KAAP;AANJ;AAQD;;AACD,MAAIG,KAAK,GAAGR,WAAW,CAACI,OAAD,CAAvB;AACAI,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ;AACD,GAFD,EAZa,CAeb;AACA;;AACAJ,EAAAA,KAAK,CAACK,QAAN,CAAe;AAAEN,IAAAA,IAAI,EAAE;AAAR,GAAf,EAjBa,CAkBb;;AACAC,EAAAA,KAAK,CAACK,QAAN,CAAe;AAAEN,IAAAA,IAAI,EAAE;AAAR,GAAf,EAnBa,CAoBb;;AACAC,EAAAA,KAAK,CAACK,QAAN,CAAe;AAAEN,IAAAA,IAAI,EAAE;AAAR,GAAf,EArBa,CAsBb;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAE,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAeJ,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from './Chart'\nimport { createStore } from 'redux'\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\nlet defaultState = {\n  chartValues:[]\n}\n\nfunction App() {\n  function reducer(state=defaultState, action) {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1\n      case 'DECREMENT':\n        return state - 1\n      default:\n        return state\n    }\n  }\n  let store = createStore(reducer)\n  store.subscribe(() => {\n    console.log(store.getState())\n  })\n  // The only way to mutate the internal state is to dispatch an action.\n  // The actions can be serialized, logged or stored and later replayed.\n  store.dispatch({ type: 'INCREMENT' })\n  // 1\n  store.dispatch({ type: 'INCREMENT' })\n  // 2\n  store.dispatch({ type: 'DECREMENT' })\n  // 1\n  //console.log('counter:', counter)\n  return (\n    <div className=\"App\">\n      <Chart data={[]} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}