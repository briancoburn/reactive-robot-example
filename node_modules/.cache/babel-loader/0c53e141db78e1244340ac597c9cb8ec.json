{"ast":null,"code":"function find_max_sum2(arr) {\n  let items = [];\n  let finalItems = [];\n  let sum = 0; //make an array of objects with both value and index\n\n  arr.forEach((item, index) => {\n    items.push({\n      value: item,\n      index\n    });\n  }); //sort them by value\n\n  items.sort((a, b) => {\n    if (a.value < b.value) {\n      return 1;\n    } else if (a.value > b.value) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }); //start with the highest values, push everything that is not at an adjacent index to something already there into finalItems\n\n  items.forEach(item => {\n    let okToPush = !finalItems.find(it => {\n      if (it.index === item.index - 1 || it.index === item.index + 1) {\n        return true;\n      }\n    });\n\n    if (okToPush) {\n      finalItems.push(item);\n    }\n  }); //add up the values in finalItems, that will be the highest possible sum available from the array\n\n  finalItems.forEach(final => {\n    sum += final.value;\n  });\n  console.log('sum:', sum);\n}\n\nexport default find_max_sum2; //find_max_sum2([1,2,3,4])//6\n//find_max_sum2([1,2,3,4,1,2,3,4])//12\n//find_max_sum2([1,5,10,100,10,5])//110\n//find_max_sum2([1,20,30,5,10,100,101,102,90,10,5])//243","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/ChangeHealthcare2.js"],"names":["find_max_sum2","arr","items","finalItems","sum","forEach","item","index","push","value","sort","a","b","okToPush","find","it","final","console","log"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,GAAvB,EAA2B;AACzB,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,GAAG,GAAC,CAAR,CAHyB,CAKzB;;AACAH,EAAAA,GAAG,CAACI,OAAJ,CAAY,CAACC,IAAD,EAAOC,KAAP,KAAe;AACzBL,IAAAA,KAAK,CAACM,IAAN,CAAW;AAACC,MAAAA,KAAK,EAACH,IAAP;AAAYC,MAAAA;AAAZ,KAAX;AACD,GAFD,EANyB,CASzB;;AACAL,EAAAA,KAAK,CAACQ,IAAN,CAAW,CAACC,CAAD,EAAGC,CAAH,KAAO;AAChB,QAAGD,CAAC,CAACF,KAAF,GAAUG,CAAC,CAACH,KAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEM,IAAGE,CAAC,CAACF,KAAF,GAAUG,CAAC,CAACH,KAAf,EAAqB;AACzB,aAAO,CAAC,CAAR;AACD,KAFK,MAED;AACH,aAAO,CAAP;AACD;AACF,GARD,EAVyB,CAmBzB;;AACAP,EAAAA,KAAK,CAACG,OAAN,CAAeC,IAAD,IAAQ;AACpB,QAAIO,QAAQ,GAAG,CAACV,UAAU,CAACW,IAAX,CAAiBC,EAAD,IAAM;AACpC,UAAGA,EAAE,CAACR,KAAH,KAAWD,IAAI,CAACC,KAAL,GAAW,CAAtB,IAA2BQ,EAAE,CAACR,KAAH,KAAWD,IAAI,CAACC,KAAL,GAAW,CAApD,EAAsD;AACpD,eAAO,IAAP;AACD;AACF,KAJe,CAAhB;;AAKA,QAAGM,QAAH,EAAY;AACVV,MAAAA,UAAU,CAACK,IAAX,CAAgBF,IAAhB;AACD;AACF,GATD,EApByB,CA8BzB;;AACAH,EAAAA,UAAU,CAACE,OAAX,CAAoBW,KAAD,IAAS;AAC1BZ,IAAAA,GAAG,IAAIY,KAAK,CAACP,KAAb;AACD,GAFD;AAGAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBd,GAApB;AACD;;AACD,eAAeJ,aAAf,C,CACA;AACA;AACA;AACA","sourcesContent":["function find_max_sum2(arr){\n  let items = [];\n  let finalItems = []\n  let sum=0\n\n  //make an array of objects with both value and index\n  arr.forEach((item, index)=>{\n    items.push({value:item,index})\n  })\n  //sort them by value\n  items.sort((a,b)=>{\n    if(a.value < b.value){\n      return 1\n    }else if(a.value > b.value){\n      return -1\n    }else{\n      return 0\n    }\n  })\n  //start with the highest values, push everything that is not at an adjacent index to something already there into finalItems\n  items.forEach((item)=>{\n    let okToPush = !finalItems.find((it)=>{\n      if(it.index===item.index-1 || it.index===item.index+1){\n        return true\n      }\n    })\n    if(okToPush){\n      finalItems.push(item)\n    }\n  })\n  //add up the values in finalItems, that will be the highest possible sum available from the array\n  finalItems.forEach((final)=>{\n    sum += final.value\n  })\n  console.log('sum:', sum)\n}\nexport default find_max_sum2\n//find_max_sum2([1,2,3,4])//6\n//find_max_sum2([1,2,3,4,1,2,3,4])//12\n//find_max_sum2([1,5,10,100,10,5])//110\n//find_max_sum2([1,20,30,5,10,100,101,102,90,10,5])//243"]},"metadata":{},"sourceType":"module"}