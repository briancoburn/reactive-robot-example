{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/reactive_robot/src/Component1.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport * as rr from './ReactiveRobot';\nimport * as ev from './Events'; //let ds;\n\nfunction Component1() {\n  const [chartValues, updateChartValues] = useState([]); //const store = createStore(reducer)\n\n  console.log('Component1==>this:', this);\n  useEffect(() => {\n    //ds = new DataService()\n    //console.log('RR.addObserver:', RR.addObserver)\n    //console.log('DataService:', DataService)\n    console.log('Component1==>useEffect==>this:', this);\n    rr.addObserver(onEvent); //ds.getData()\n    // store.subscribe(() => {\n    //   let state = store.getState()\n    //   updateChartValues(state.chartValues)\n    // })\n    //\n    // setInterval(()=>{\n    //   store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n    // },1000)\n  }, []);\n\n  function onEvent(event) {\n    switch (event.type) {\n      case ev.TEST_COMPONENT1:\n        console.log('Component1==>got test event==>event.data:', event.data);\n    }\n  } // let total = chartValues.reduce((accum,curr)=>{return accum+curr},0)\n  // let average = total/chartValues.length\n  //let messages = [];\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, \"Component1\");\n}\n\nexport default Component1;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/reactive_robot/src/Component1.js"],"names":["React","useState","useEffect","rr","ev","Component1","chartValues","updateChartValues","console","log","addObserver","onEvent","event","type","TEST_COMPONENT1","data"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB,C,CACA;;AAEA,SAASC,UAAT,GAAsB;AACpB,QAAM,CAACC,WAAD,EAAcC,iBAAd,IAAmCN,QAAQ,CAAC,EAAD,CAAjD,CADoB,CAEpB;;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,IAAlC;AAEAP,EAAAA,SAAS,CAAC,MAAI;AACZ;AACA;AACA;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8C,IAA9C;AACAN,IAAAA,EAAE,CAACO,WAAH,CAAeC,OAAf,EALY,CAMZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,GAhBQ,EAgBP,EAhBO,CAAT;;AAkBA,WAASA,OAAT,CAAiBC,KAAjB,EAAuB;AACrB,YAAQA,KAAK,CAACC,IAAd;AACE,WAAKT,EAAE,CAACU,eAAR;AACEN,QAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDG,KAAK,CAACG,IAA/D;AAFJ;AAID,GA5BmB,CA8BpB;AACA;AACA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAKD;;AAED,eAAeV,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport * as rr from './ReactiveRobot'\nimport * as ev from './Events'\n//let ds;\n\nfunction Component1() {\n  const [chartValues, updateChartValues] = useState([])\n  //const store = createStore(reducer)\n  console.log('Component1==>this:', this)\n\n  useEffect(()=>{\n    //ds = new DataService()\n    //console.log('RR.addObserver:', RR.addObserver)\n    //console.log('DataService:', DataService)\n    console.log('Component1==>useEffect==>this:', this)\n    rr.addObserver(onEvent)\n    //ds.getData()\n    // store.subscribe(() => {\n    //   let state = store.getState()\n    //   updateChartValues(state.chartValues)\n    // })\n    //\n    // setInterval(()=>{\n    //   store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n    // },1000)\n\n  },[])\n\n  function onEvent(event){\n    switch (event.type){\n      case ev.TEST_COMPONENT1:\n        console.log('Component1==>got test event==>event.data:', event.data)\n    }\n  }\n\n  // let total = chartValues.reduce((accum,curr)=>{return accum+curr},0)\n  // let average = total/chartValues.length\n  //let messages = [];\n\n  return (\n    <div className=\"App\">\n      Component1\n    </div>\n  );\n}\n\nexport default Component1;\n"]},"metadata":{},"sourceType":"module"}