{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/LineChart.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport './LineChart.css'; // import {makeStyles} from '@material-ui/core/styles'\n//\n// const styles = makeStyles((theme)=>({\n//   poobar:{\n//     marginTop:'20px',\n//   }\n// }))\n\nfunction LineChart(props) {\n  const [chartValues, updateChartValues] = useState([]);\n  useEffect(() => {}, []);\n\n  function formatTime(value) {\n    if (value < 10) {\n      return '0' + value;\n    }\n\n    return value;\n  }\n\n  let labels = [];\n\n  function makeLabel(timestamp) {\n    return formatTime(timestamp.getHours()) + ':' + formatTime(timestamp.getMinutes()) + ':' + formatTime(timestamp.getSeconds());\n  }\n\n  function makeLabels() {\n    let currentSecond = new Date(Date.now());\n\n    for (let i = chartValues.length - 1; i >= 0; i -= 1) {\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)));\n    }\n  }\n\n  makeLabels();\n  let total = chartValues.reduce((accum, curr) => {\n    return accum + curr;\n  }, 0);\n  let average = total / chartValues.length;\n  let data = {\n    labels: labels,\n    datasets: [{\n      label: \"Spam messages received per second\",\n      fillColor: \"rgba(220,220,220,0.2)\",\n      lineTension: 0.1,\n      strokeColor: \"rgba(220,220,220,1)\",\n      pointColor: \"rgba(220,220,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,220,1)\",\n      data: chartValues\n    }]\n  };\n  let chartOptions = {\n    animation: {\n      duration: 0\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lineChartContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data || {},\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default LineChart;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/LineChart.js"],"names":["React","useEffect","useRef","useState","Line","LineChart","props","chartValues","updateChartValues","formatTime","value","labels","makeLabel","timestamp","getHours","getMinutes","getSeconds","makeLabels","currentSecond","Date","now","i","length","push","total","reduce","accum","curr","average","data","datasets","label","fillColor","lineTension","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","chartOptions","animation","duration"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AACA,OAAO,iBAAP,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AACvB,QAAM,CAACC,WAAD,EAAcC,iBAAd,IAAmCL,QAAQ,CAAC,EAAD,CAAjD;AACAF,EAAAA,SAAS,CAAC,MAAI,CAGb,CAHQ,EAGP,EAHO,CAAT;;AAKA,WAASQ,UAAT,CAAoBC,KAApB,EAA0B;AACxB,QAAGA,KAAK,GAAG,EAAX,EAAc;AACZ,aAAO,MAAIA,KAAX;AACD;;AACD,WAAOA,KAAP;AACD;;AAED,MAAIC,MAAM,GAAG,EAAb;;AACA,WAASC,SAAT,CAAmBC,SAAnB,EAA6B;AAC3B,WAAOJ,UAAU,CAACI,SAAS,CAACC,QAAV,EAAD,CAAV,GAAiC,GAAjC,GAAqCL,UAAU,CAACI,SAAS,CAACE,UAAV,EAAD,CAA/C,GAAwE,GAAxE,GAA4EN,UAAU,CAACI,SAAS,CAACG,UAAV,EAAD,CAA7F;AACD;;AAED,WAASC,UAAT,GAAqB;AACnB,QAAIC,aAAa,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAApB;;AACA,SAAI,IAAIC,CAAC,GAACd,WAAW,CAACe,MAAZ,GAAmB,CAA7B,EAA+BD,CAAC,IAAE,CAAlC,EAAoCA,CAAC,IAAE,CAAvC,EAAyC;AACvCV,MAAAA,MAAM,CAACY,IAAP,CAAYX,SAAS,CAAC,IAAIO,IAAJ,CAASD,aAAa,GAAGG,CAAC,GAAG,IAA7B,CAAD,CAArB;AACD;AACF;;AACDJ,EAAAA,UAAU;AACV,MAAIO,KAAK,GAAGjB,WAAW,CAACkB,MAAZ,CAAmB,CAACC,KAAD,EAAOC,IAAP,KAAc;AAAC,WAAOD,KAAK,GAACC,IAAb;AAAkB,GAApD,EAAqD,CAArD,CAAZ;AACA,MAAIC,OAAO,GAAGJ,KAAK,GAACjB,WAAW,CAACe,MAAhC;AAEA,MAAIO,IAAI,GAAG;AACTlB,IAAAA,MAAM,EAAEA,MADC;AAETmB,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,mCADT;AAEEC,MAAAA,SAAS,EAAE,uBAFb;AAGEC,MAAAA,WAAW,EAAC,GAHd;AAIEC,MAAAA,WAAW,EAAE,qBAJf;AAKEC,MAAAA,UAAU,EAAE,qBALd;AAMEC,MAAAA,gBAAgB,EAAE,MANpB;AAOEC,MAAAA,kBAAkB,EAAE,MAPtB;AAQEC,MAAAA,oBAAoB,EAAE,qBARxB;AASET,MAAAA,IAAI,EAAEtB;AATR,KADQ;AAFD,GAAX;AAgBA,MAAIgC,YAAY,GAAC;AACfC,IAAAA,SAAS,EAAC;AACRC,MAAAA,QAAQ,EAAE;AADF;AADK,GAAjB;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEZ,IAAI,IAAI,EAApB;AAAwB,IAAA,OAAO,EAAEU,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAMD;;AACD,eAAelC,SAAf","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport {Line} from \"react-chartjs-2\";\nimport './LineChart.css'\n// import {makeStyles} from '@material-ui/core/styles'\n//\n// const styles = makeStyles((theme)=>({\n//   poobar:{\n//     marginTop:'20px',\n//   }\n// }))\n\nfunction LineChart(props){\n  const [chartValues, updateChartValues] = useState([])\n  useEffect(()=>{\n\n\n  },[])\n\n  function formatTime(value){\n    if(value < 10){\n      return '0'+value\n    }\n    return value\n  }\n\n  let labels = []\n  function makeLabel(timestamp){\n    return formatTime(timestamp.getHours())+':'+formatTime(timestamp.getMinutes())+':'+formatTime(timestamp.getSeconds())\n  }\n\n  function makeLabels(){\n    let currentSecond = new Date(Date.now())\n    for(let i=chartValues.length-1;i>=0;i-=1){\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)))\n    }\n  }\n  makeLabels()\n  let total = chartValues.reduce((accum,curr)=>{return accum+curr},0)\n  let average = total/chartValues.length\n\n  let data = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"Spam messages received per second\",\n        fillColor: \"rgba(220,220,220,0.2)\",\n        lineTension:0.1,\n        strokeColor: \"rgba(220,220,220,1)\",\n        pointColor: \"rgba(220,220,220,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(220,220,220,1)\",\n        data: chartValues\n      }\n    ]\n  };\n  let chartOptions={\n    animation:{\n      duration: 0\n    }\n  }\n\n\n  return (\n    <div className='lineChartContainer'>\n      <Line data={data || {}} options={chartOptions} />\n    </div>\n  )\n\n}\nexport default LineChart"]},"metadata":{},"sourceType":"module"}