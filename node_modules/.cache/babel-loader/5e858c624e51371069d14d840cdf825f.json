{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/reactive_robot/src/Component1.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Component1.css';\nimport * as rr from './ReactiveRobot';\nimport * as ev from './Events';\n\nfunction Component1(props) {\n  const [currentValue, setCurrentValue] = useState(` inited at ${Date.now()}`);\n  const [useRedBackground, setUseRedBackground] = useState(false);\n  const [useRedOutline, setUseRedOutline] = useState(false);\n  useEffect(() => {\n    rr.addObserver(onEvent);\n    rr.next({\n      type: ev.COMPONENT_UPDATE_GET,\n      data: {\n        name: props.name\n      }\n    });\n    return () => {\n      rr.removeObserver(onEvent);\n    }; //cleanup on unmount\n  }, []);\n\n  function showRedBackground() {\n    setUseRedBackground(true);\n  }\n\n  function hideRedBackground() {\n    setUseRedBackground(false);\n    setUseRedOutline(true);\n  }\n\n  function onEvent(event) {\n    switch (event.type) {\n      case ev.INITIALIZE_COMPONENTS:\n        setUseRedBackground(false);\n        setUseRedOutline(false);\n        break;\n\n      case ev.COMPONENT_UPDATE_RECEIVED:\n        if (event.data.name === props.name) {\n          showRedBackground();\n          setTimeout(hideRedBackground, 500);\n          setCurrentValue(event.data.message);\n        }\n\n    }\n  }\n\n  let backgroundClass = 'Component1';\n\n  if (useRedBackground) {\n    backgroundClass = 'Component1JustUpdated';\n  } else if (useRedOutline) {\n    backgroundClass = 'Component1HasUpdated';\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: backgroundClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, props.name), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, currentValue));\n}\n\nexport default Component1;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/reactive_robot/src/Component1.js"],"names":["React","useState","useEffect","rr","ev","Component1","props","currentValue","setCurrentValue","Date","now","useRedBackground","setUseRedBackground","useRedOutline","setUseRedOutline","addObserver","onEvent","next","type","COMPONENT_UPDATE_GET","data","name","removeObserver","showRedBackground","hideRedBackground","event","INITIALIZE_COMPONENTS","COMPONENT_UPDATE_RECEIVED","setTimeout","message","backgroundClass"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,kBAAP;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAE,cAAaQ,IAAI,CAACC,GAAL,EAAW,EAA1B,CAAhD;AACA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,KAAD,CAAlD;AACAC,EAAAA,SAAS,CAAC,MAAI;AACZC,IAAAA,EAAE,CAACY,WAAH,CAAeC,OAAf;AACAb,IAAAA,EAAE,CAACc,IAAH,CAAQ;AAACC,MAAAA,IAAI,EAACd,EAAE,CAACe,oBAAT;AAA8BC,MAAAA,IAAI,EAAC;AAACC,QAAAA,IAAI,EAACf,KAAK,CAACe;AAAZ;AAAnC,KAAR;AACA,WAAO,MAAI;AAAClB,MAAAA,EAAE,CAACmB,cAAH,CAAkBN,OAAlB;AAA2B,KAAvC,CAHY,CAG2B;AACxC,GAJQ,EAIP,EAJO,CAAT;;AAMA,WAASO,iBAAT,GAA4B;AAC1BX,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD;;AAED,WAASY,iBAAT,GAA4B;AAC1BZ,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAE,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;;AAED,WAASE,OAAT,CAAiBS,KAAjB,EAAuB;AACrB,YAAQA,KAAK,CAACP,IAAd;AAEE,WAAKd,EAAE,CAACsB,qBAAR;AACEd,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAE,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA;;AACF,WAAKV,EAAE,CAACuB,yBAAR;AACE,YAAGF,KAAK,CAACL,IAAN,CAAWC,IAAX,KAAkBf,KAAK,CAACe,IAA3B,EAAgC;AAC9BE,UAAAA,iBAAiB;AACjBK,UAAAA,UAAU,CAACJ,iBAAD,EAAmB,GAAnB,CAAV;AACAhB,UAAAA,eAAe,CAACiB,KAAK,CAACL,IAAN,CAAWS,OAAZ,CAAf;AACD;;AAXL;AAaD;;AACD,MAAIC,eAAe,GAAG,YAAtB;;AACA,MAAGnB,gBAAH,EAAoB;AAClBmB,IAAAA,eAAe,GAAG,uBAAlB;AACD,GAFD,MAEM,IAAGjB,aAAH,EAAiB;AACrBiB,IAAAA,eAAe,GAAG,sBAAlB;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAEA,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOxB,KAAK,CAACe,IAAb,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOd,YAAP,CAFF,CADF;AAMD;;AAED,eAAeF,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './Component1.css'\nimport * as rr from './ReactiveRobot'\nimport * as ev from './Events'\n\nfunction Component1(props) {\n  const [currentValue, setCurrentValue] = useState(` inited at ${Date.now()}`)\n  const [useRedBackground, setUseRedBackground] = useState(false)\n  const [useRedOutline, setUseRedOutline] = useState(false)\n  useEffect(()=>{\n    rr.addObserver(onEvent)\n    rr.next({type:ev.COMPONENT_UPDATE_GET,data:{name:props.name}})\n    return ()=>{rr.removeObserver(onEvent)}//cleanup on unmount\n  },[])\n\n  function showRedBackground(){\n    setUseRedBackground(true)\n  }\n\n  function hideRedBackground(){\n    setUseRedBackground(false)\n    setUseRedOutline(true)\n  }\n\n  function onEvent(event){\n    switch (event.type){\n\n      case ev.INITIALIZE_COMPONENTS:\n        setUseRedBackground(false)\n        setUseRedOutline(false)\n        break;\n      case ev.COMPONENT_UPDATE_RECEIVED:\n        if(event.data.name===props.name){\n          showRedBackground()\n          setTimeout(hideRedBackground,500)\n          setCurrentValue(event.data.message)\n        }\n    }\n  }\n  let backgroundClass = 'Component1'\n  if(useRedBackground){\n    backgroundClass = 'Component1JustUpdated'\n  }else if(useRedOutline){\n    backgroundClass = 'Component1HasUpdated'\n  }\n  return (\n    <div className={backgroundClass}>\n      <span>{props.name}</span>\n      <span>{currentValue}</span>\n    </div>\n  );\n}\n\nexport default Component1;\n"]},"metadata":{},"sourceType":"module"}