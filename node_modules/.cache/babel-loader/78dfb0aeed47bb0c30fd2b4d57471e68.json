{"ast":null,"code":"var _jsxFileName = \"/Users/briancoburn/WebstormProjects/test/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { createStore } from 'redux';\nimport { Line } from \"react-chartjs-2\";\nimport BarChartD3 from './BarChartD3.js';\nlet defaultState = {\n  chartValues: []\n};\nconst MAX_CHART_VALS = 10; //600//10 minutes\n\nfunction App() {\n  const [chartValues, updateChartValues] = useState([]);\n  const [currentMessage, updateCurrentMessage] = useState([]);\n  const [messages, updateMessages] = useState([]);\n  const store = createStore(reducer);\n\n  function reducer(state = defaultState, action) {\n    switch (action.type) {\n      case 'UPDATE_CHART':\n        let chartValuesTemp = state.chartValues.concat([]);\n        chartValuesTemp.push(action.value);\n\n        if (chartValuesTemp.length > MAX_CHART_VALS) {\n          chartValuesTemp.shift();\n        }\n\n        return { ...state,\n          chartValues: chartValuesTemp\n        };\n\n      default:\n        return state;\n    }\n  }\n\n  useEffect(() => {\n    //figurePi for Eargo//\n    // function figurePi(sideLength){\n    //   let approxPi = 0\n    //   let radius = sideLength/2\n    //   let inside = 0\n    //   let total = 0\n    //   for(let i=0;i<sideLength;i+=1){\n    //     for(let j=0;j<sideLength;j+=1){\n    //       let distanceToPoint = Math.floor(Math.sqrt(((i/2)*(i/2))+((j/2)*(j/2))))\n    //       if(distanceToPoint < radius){\n    //         inside +=1\n    //       }\n    //       total+=1\n    //     }\n    //   }\n    //   let ratio = inside/total\n    //   let areaOfSquare = sideLength * sideLength\n    //   let areaOfCircle = areaOfSquare * ratio\n    //   approxPi = areaOfCircle/(radius*radius)\n    //   console.log('approxPi:', approxPi)\n    //\n    // }\n    // let pi = figurePi(100000)\n    //100 iterations approxPi: 3.1796\n    //1000 iterations approxPi: 3.14552\n    //10000 approxPi: 3.14199016\n    //100000 approxPi: 3.1416325412\n    // function fib(max){\n    //   let arr = [1,1]\n    //   // let acc = 0\n    //   // while(acc<max){\n    //   //   acc = arr[arr.length-1]+arr[arr.length-2]\n    //   //   console.log('acc:', acc)\n    //   //   arr.push(acc)\n    //   // }\n    //   console.log('arr:', arr)\n    // }\n    // fib(50)\n    messages.push({\n      user: 'system',\n      message: 'how can I help you'\n    });\n    store.subscribe(() => {\n      let state = store.getState();\n      updateChartValues(state.chartValues);\n    });\n    setInterval(() => {\n      store.dispatch({\n        type: 'UPDATE_CHART',\n        value: Math.floor(Math.random() * 100)\n      });\n    }, 1000);\n  }, []);\n\n  function formatTime(value) {\n    if (value < 10) {\n      return '0' + value;\n    }\n\n    return value;\n  }\n\n  let labels = [];\n\n  function makeLabel(timestamp) {\n    return formatTime(timestamp.getHours()) + ':' + formatTime(timestamp.getMinutes()) + ':' + formatTime(timestamp.getSeconds());\n  }\n\n  function makeLabels() {\n    let currentSecond = new Date(Date.now());\n\n    for (let i = chartValues.length - 1; i >= 0; i -= 1) {\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)));\n    }\n  }\n\n  makeLabels();\n  let total = chartValues.reduce((accum, curr) => {\n    return accum + curr;\n  }, 0);\n  let average = total / chartValues.length;\n  let data = {\n    labels: labels,\n    datasets: [{\n      label: \"Spam messages received per second\",\n      fillColor: \"rgba(220,220,220,0.2)\",\n      lineTension: 0.1,\n      strokeColor: \"rgba(220,220,220,1)\",\n      pointColor: \"rgba(220,220,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,220,1)\",\n      data: chartValues\n    }]\n  };\n  let chartOptions = {\n    animation: {\n      duration: 0\n    }\n  };\n\n  function onMessageChange(evt) {\n    console.log('evt.target.value:', evt.target.value);\n    updateCurrentMessage(evt.target.value);\n  }\n\n  function onClickSend(evt) {\n    console.log('currentMessage:', currentMessage);\n    console.log('messages:', messages);\n    messages.push({\n      user: 'me',\n      message: currentMessage\n    });\n  }\n\n  let displayMessages = messages.map(msg => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: msg.user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 12\n      }\n    }, msg.message);\n  }); //let messages = [];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, \"Spaminator\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, \"The Enterprise Spam Real Time Monitor - Displaying Your Spam By The Second\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lineChartContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data || {},\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, 'Spam messages received just this last second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, chartValues[chartValues.length - 1] + ' at ' + new Date(Date.now()).toLocaleString()), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, 'Average number of spam messages per second:'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, Math.floor(average)), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'd3BarChartContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BarChartD3, {\n    data: chartValues,\n    size: [400, 300],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'changeContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: 'changeHeader',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, \"Jordi's Bot\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, \"How can I help you?\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'changeContent',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, displayMessages), /*#__PURE__*/React.createElement(\"div\", {\n    className: 'changeFooter',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: 'text',\n    value: currentMessage,\n    onChange: evt => {\n      onMessageChange(evt);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: evt => {\n      onClickSend(evt);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, \"send\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briancoburn/WebstormProjects/test/src/App.js"],"names":["React","useState","useEffect","createStore","Line","BarChartD3","defaultState","chartValues","MAX_CHART_VALS","App","updateChartValues","currentMessage","updateCurrentMessage","messages","updateMessages","store","reducer","state","action","type","chartValuesTemp","concat","push","value","length","shift","user","message","subscribe","getState","setInterval","dispatch","Math","floor","random","formatTime","labels","makeLabel","timestamp","getHours","getMinutes","getSeconds","makeLabels","currentSecond","Date","now","i","total","reduce","accum","curr","average","data","datasets","label","fillColor","lineTension","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","chartOptions","animation","duration","onMessageChange","evt","console","log","target","onClickSend","displayMessages","map","msg","toLocaleString"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { createStore } from 'redux'\nimport {Line} from \"react-chartjs-2\";\nimport BarChartD3 from './BarChartD3.js'\n\nlet defaultState = {\n  chartValues:[]\n}\nconst MAX_CHART_VALS = 10//600//10 minutes\n\nfunction App() {\n\n  const [chartValues, updateChartValues] = useState([])\n  const [currentMessage, updateCurrentMessage] = useState([])\n  const [messages, updateMessages] = useState([])\n  const store = createStore(reducer)\n  function reducer(state=defaultState, action) {\n    switch (action.type) {\n      case 'UPDATE_CHART':\n        let chartValuesTemp = state.chartValues.concat([])\n        chartValuesTemp.push(action.value)\n        if(chartValuesTemp.length > MAX_CHART_VALS){\n          chartValuesTemp.shift()\n        }\n        return {...state,chartValues:chartValuesTemp}\n      default:\n        return state\n    }\n  }\n\n  useEffect(()=>{\n\n    //figurePi for Eargo//\n    // function figurePi(sideLength){\n    //   let approxPi = 0\n    //   let radius = sideLength/2\n    //   let inside = 0\n    //   let total = 0\n    //   for(let i=0;i<sideLength;i+=1){\n    //     for(let j=0;j<sideLength;j+=1){\n    //       let distanceToPoint = Math.floor(Math.sqrt(((i/2)*(i/2))+((j/2)*(j/2))))\n    //       if(distanceToPoint < radius){\n    //         inside +=1\n    //       }\n    //       total+=1\n    //     }\n    //   }\n    //   let ratio = inside/total\n    //   let areaOfSquare = sideLength * sideLength\n    //   let areaOfCircle = areaOfSquare * ratio\n    //   approxPi = areaOfCircle/(radius*radius)\n    //   console.log('approxPi:', approxPi)\n    //\n    // }\n    // let pi = figurePi(100000)\n    //100 iterations approxPi: 3.1796\n    //1000 iterations approxPi: 3.14552\n    //10000 approxPi: 3.14199016\n    //100000 approxPi: 3.1416325412\n\n    // function fib(max){\n    //   let arr = [1,1]\n    //   // let acc = 0\n    //   // while(acc<max){\n    //   //   acc = arr[arr.length-1]+arr[arr.length-2]\n    //   //   console.log('acc:', acc)\n    //   //   arr.push(acc)\n    //   // }\n    //   console.log('arr:', arr)\n    // }\n    // fib(50)\n\n\n    messages.push({user:'system', message:'how can I help you'})\n\n    store.subscribe(() => {\n      let state = store.getState()\n      updateChartValues(state.chartValues)\n    })\n    setInterval(()=>{\n      store.dispatch({type:'UPDATE_CHART', value: Math.floor(Math.random() * 100)})\n    },1000)\n\n  },[])\n\n  function formatTime(value){\n    if(value < 10){\n      return '0'+value\n    }\n    return value\n  }\n\n  let labels = []\n  function makeLabel(timestamp){\n    return formatTime(timestamp.getHours())+':'+formatTime(timestamp.getMinutes())+':'+formatTime(timestamp.getSeconds())\n  }\n\n  function makeLabels(){\n    let currentSecond = new Date(Date.now())\n    for(let i=chartValues.length-1;i>=0;i-=1){\n      labels.push(makeLabel(new Date(currentSecond - i * 1000)))\n    }\n  }\n  makeLabels()\n  let total = chartValues.reduce((accum,curr)=>{return accum+curr},0)\n  let average = total/chartValues.length\n\n  let data = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"Spam messages received per second\",\n        fillColor: \"rgba(220,220,220,0.2)\",\n        lineTension:0.1,\n        strokeColor: \"rgba(220,220,220,1)\",\n        pointColor: \"rgba(220,220,220,1)\",\n        pointStrokeColor: \"#fff\",\n        pointHighlightFill: \"#fff\",\n        pointHighlightStroke: \"rgba(220,220,220,1)\",\n        data: chartValues\n      }\n    ]\n  };\n  let chartOptions={\n    animation:{\n      duration: 0\n    }\n  }\n\n  function onMessageChange(evt){\n    console.log('evt.target.value:', evt.target.value)\n    updateCurrentMessage(evt.target.value)\n  }\n\n  function onClickSend(evt){\n    console.log('currentMessage:', currentMessage)\n    console.log('messages:', messages)\n    messages.push({user:'me', message:currentMessage})\n  }\n\n  let displayMessages = messages.map((msg)=>{\n    return <div className={msg.user}>{msg.message}</div>\n  })\n\n  //let messages = [];\n\n\n  return (\n    <div className=\"App\">\n      <h4>Spaminator</h4>\n      <h5>The Enterprise Spam Real Time Monitor - Displaying Your Spam By The Second</h5>\n      <div className='lineChartContainer'>\n        <Line data={data || {}} options={chartOptions} />\n      </div>\n\n      <div>{'Spam messages received just this last second:'}</div>\n      <div>{chartValues[chartValues.length-1]+' at '+new Date(Date.now()).toLocaleString()}</div>\n      <div>{'Average number of spam messages per second:'}</div>\n      <div>{Math.floor(average)}</div>\n      <div className={'d3BarChartContainer'}>\n        <BarChartD3 data={chartValues} size={[400, 300]} />\n      </div>\n      <div className={'changeContainer'}>\n        <div className={'changeHeader'}>\n          <span>Jordi's Bot</span>\n          <span>How can I help you?</span>\n        </div>\n        <div className={'changeContent'}>\n          {displayMessages}\n        </div>\n        <div className={'changeFooter'}><input type={'text'} value={currentMessage} onChange={(evt)=>{onMessageChange(evt)}}/></div>\n        <button onClick={(evt)=>{onClickSend(evt)}}>send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}